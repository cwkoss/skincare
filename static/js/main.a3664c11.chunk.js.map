{"version":3,"sources":["Goals.js","Product.js","ingredients.js","Summary.js","RecipeBuilder.js","firebase-config.js","FinalizeRecipe.js","SavedRecipe.js","OrderFormulation.js","OrderSuccess.js","Contact.js","App.js","reportWebVitals.js","index.js"],"names":["Goals","_ref","setGoalsData","setSelectedMoodsApp","setIncludeFragranceApp","navigate","useNavigate","selectedOptions","setSelectedOptions","useState","includeFragrance","setIncludeFragrance","selectedMoods","setSelectedMoods","isMoodSelected","mood","includes","React","createElement","onSubmit","e","preventDefault","map","goal","index","key","type","onClick","option","newSelectedOptions","filter","item","toggleOption","className","concat","newSelectedMoods","toggleMood","disabled","length","Product","setProductData","selectedProduct","setSelectedProduct","Object","entries","_ref2","description","charAt","toUpperCase","slice","ingredients","phase","hlb","good_for","bad_for","max_percent","default_percent","loadingMessages","Summary","goalsData","productData","loading","setLoading","currentMessage","setCurrentMessage","formatIngredientsList","formattedString","keys","forEach","array","hasOwnProperty","useEffect","interval","setInterval","prevMessage","nextIndex","indexOf","clearInterval","Fragment","handleAIClick","goals","join","productType","fragranceSentence","data","text","console","log","fetch","method","headers","body","JSON","stringify","then","response","json","recipeResponse","reply","choices","message","content","parsedResponse","parse","state","recipe","catch","error","handleManualClick","RecipeBuilder","_location$state","selectedIngredients","setSelectedIngredients","ingredientProportions","setIngredientProportions","currentStep","setCurrentStep","recipeCommentary","setRecipeCommentary","shelfLifeEstimate","setShelfLifeEstimate","location","useLocation","initialRecipe","goToProportionAdjustment","redistributeProportions","adjustedIngredient","adjustedValue","remainingProportion","name","isAdditive","reduce","acc","nonAdditiveIngredients","newProportions","totalCurrentNonAdditive","scaleFactor","adjustedProportion","temporaryInputs","setTemporaryInputs","ingredientName","ingredient","roundProportions","roundedTotal","Math","round","discrepancy","nonAdditiveKeys","adjustmentPerIngredient","negativeSum","positiveKeys","positiveAdjustment","abs","finalTotal","values","val","excess","excessAdjustment","handleMouseUp","setTimeout","headerWithButtonStyle","display","justifyContent","alignItems","marginBottom","prevProportions","totalPercentage","value","totalPercentageStyle","color","ingredientsFromResponse","selectedIngredientsFromResponse","push","style","details","handleIngredientSelect","goBackToSelectIngredients","toFixed","width","borderCollapse","_temporaryInputs$name","colSpan","position","onChange","handleAdditiveChange","newValue","parseFloat","maxPercent","isNaN","match","boundedValue","target","onBlur","handleAdditiveBlur","borderColor","right","top","min","max","step","handleSliderChange","onMouseUp","onTouchEnd","getRecipeAdvice","finalizeRecipe","commentary","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","db","getFirestore","FinalizeRecipe","_location$state2","recipeName","setRecipeName","placeholder","handleChangeIngredients","handleChangeProportions","async","recipeId","toLowerCase","replace","Date","getTime","setDoc","doc","createdAt","SavedRecipe","recipeData","setRecipeData","shareButtonText","setShareButtonText","paramRecipeId","URLSearchParams","search","get","docRef","docSnap","getDoc","exists","fetchData","handleShareRecipe","currentUrl","window","href","shareUrl","navigator","clipboard","writeText","handleOrderFormulation","OrderFormulation","setName","phoneNumber","setPhoneNumber","pickup","setPickup","address","setAddress","street1","street2","zip","orderId","readOnly","OrderSuccess","Contact","setMessage","isSubmitted","setIsSubmitted","addDoc","collection","App","Router","Routes","Route","path","element","backgroundImage","backgroundSize","backgroundRepeat","backgroundPosition","height","src","Link","to","fragrance","moods","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.a3664c11.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\n\r\nfunction Goals({ setGoalsData, setSelectedMoodsApp, setIncludeFragranceApp }) {\r\n  const navigate = useNavigate();\r\n  const [selectedOptions, setSelectedOptions] = useState([]);\r\n  const [includeFragrance, setIncludeFragrance] = useState('no');\r\n  const [selectedMoods, setSelectedMoods] = useState([]);\r\n\r\n  const skincareGoals = [\r\n    \"Adult acne\", \"Dry skin\", \"Sensitive Skin\", \"Wrinkles\",\r\n    \"Puffiness\", \"Redness\", \"Sun Protection\", \"Aging or age spots\", \"Large pores\",\r\n    \"Atopic dermatitis\"\r\n  ];\r\n\r\n  const goalsToIngredients = {\r\n    \"Adult acne\": [\"Tea Tree Oil\", \"Green Tea\", \"Honey\", \"Apple Cider Vinegar\", \"Zinc Oxide\"],\r\n    \"Dry skin\": [\"Shea Butter\", \"Cocoa Butter\", \"Hyaluronic Acid\", \"Olive Oil\", \"Coconut Oil\"],\r\n    \"Sensitive Skin\": [\"Aloe Vera Gel\", \"Oat Milk\", \"Sunflower Oil\", \"Jojoba Oil\", \"Cucumber Juice\"],\r\n    \"Wrinkles\": [\"Argan Oil\", \"Retinol\", \"Hyaluronic Acid\", \"Vitamin C\", \"Rosemary Oil\"],\r\n    \"Puffiness\": [\"Cucumber Juice\", \"Green Tea\", \"Aloe Vera Gel\", \"Peppermint Oil\", \"Tea Tree Oil\"],\r\n    \"Redness\": [\"Aloe Vera Gel\", \"Cucumber Juice\", \"Green Tea\", \"Niacinamide (Vitamin B3)\", \"Oat Milk\"],\r\n    \"Sun Protection\": [\"Zinc Oxide\", \"Vitamin C\", \"Vitamin E\", \"Coconut Oil\", \"Shea Butter\"],\r\n    \"Aging or age spots\": [\"Vitamin C\", \"Retinol\", \"Hyaluronic Acid\", \"Argan Oil\", \"Niacinamide (Vitamin B3)\"],\r\n    \"Large pores\": [\"Apple Cider Vinegar\", \"Green Tea\", \"Clay (if available, not in list)\", \"Honey\", \"Tea Tree Oil\"],\r\n    \"Atopic dermatitis\": [\"Oat Milk\", \"Sunflower Oil\", \"Shea Butter\", \"Aloe Vera Gel\", \"Cocoa Butter\"]\r\n};\r\n\r\n\r\n  const moods = [\r\n    \"Fresh\", \"Relaxing\", \"Invigorated\", \"Pampered\", \"Focused\", \"Beautiful\", \"Confident\", \"Rejuvenated\", \"Empowered\"\r\n  ];\r\n\r\n  const toggleOption = (option) => {\r\n    const newSelectedOptions = selectedOptions.includes(option)\r\n      ? selectedOptions.filter(item => item !== option)\r\n      : [...selectedOptions, option];\r\n\r\n    setSelectedOptions(newSelectedOptions);\r\n  };\r\n\r\n  const isOptionSelected = (option) => {\r\n    return selectedOptions.includes(option);\r\n  };\r\n\r\n  const toggleMood = (mood) => {\r\n    const newSelectedMoods = selectedMoods.includes(mood)\r\n      ? selectedMoods.filter(item => item !== mood)\r\n      : [...selectedMoods, mood];\r\n\r\n    setSelectedMoods(newSelectedMoods);\r\n  };\r\n\r\n  const isMoodSelected = (mood) => {\r\n    return selectedMoods.includes(mood);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    setGoalsData(selectedOptions);\r\n    setSelectedMoodsApp(selectedMoods);\r\n    setIncludeFragranceApp(includeFragrance);\r\n    navigate('/product');\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Select Your Skincare Goals/Concerns</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        {skincareGoals.map((goal, index) => (\r\n          <button\r\n            key={index}\r\n            type=\"button\"\r\n            onClick={() => toggleOption(goal)}\r\n            className={`goals-button ${isOptionSelected(goal) ? 'selected' : ''}`}\r\n          >\r\n            {goal}\r\n          </button>\r\n        ))}\r\n\r\n        {/* Fragrance selection */}\r\n        <div>\r\n          <h3>Include natural fragrances?</h3>\r\n          <button type=\"button\" onClick={() => setIncludeFragrance('yes')} className={`goals-button ${includeFragrance === 'yes' ? 'selected' : ''}`}>Yes</button>\r\n          <button type=\"button\" onClick={() => setIncludeFragrance('no')} className={`goals-button ${includeFragrance === 'no' ? 'selected' : ''}`}>No</button>\r\n        </div>\r\n\r\n        {/* Mood selection, shown if fragrance is 'yes' */}\r\n        {includeFragrance === 'yes' && (\r\n          <div>\r\n            <h3>How do you want the fragrance to make you feel?</h3>\r\n            {moods.map((mood, index) => (\r\n              <button\r\n                key={index}\r\n                type=\"button\"\r\n                onClick={() => toggleMood(mood)}\r\n                className={`goals-button ${isMoodSelected(mood) ? 'selected' : ''}`}\r\n              >\r\n                {mood}\r\n              </button>\r\n            ))}\r\n          </div>\r\n        )}\r\n\r\n        <button className=\"submit\" type=\"submit\" disabled={selectedOptions.length === 0 || (includeFragrance === 'yes' && selectedMoods.length === 0)}>Next</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Goals;\r\n","import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nfunction Product({ setProductData }) {\r\n    const navigate = useNavigate();\r\n    const [selectedProduct, setSelectedProduct] = useState('');\r\n\r\n    const skincareProducts = {\r\n\r\n        //toner: \"Applied after cleansing, toner helps to remove any remaining impurities and balances the pH of the skin.\",\r\n        //serum: \"Highly concentrated with active ingredients, serums target specific skin concerns such as aging, hydration, or brightening.\",\r\n        //moisturizer: \"Hydrates the skin and locks in moisture. It can come in various forms like lotions, creams, and gels.\",\r\n        //sunscreen: \"Protects the skin from harmful UV rays. It's essential for preventing sun damage, aging, and skin cancer.\",\r\n        // exfoliant: \"Removes dead skin cells from the surface of the skin, promoting a smoother and clearer complexion.\",\r\n        //eyeCream: \"Specifically formulated for the delicate eye area, it targets concerns like dark circles, puffiness, and wrinkles.\",\r\n        //mask: \"Used occasionally to address specific skin concerns. Masks can hydrate, detoxify, or provide anti-aging benefits.\",\r\n        \"Lotion\" : \"A lightweight moisturizer, often used for normal to oily skin, providing hydration without being too heavy.\",\r\n        \"Cream\": \"Thicker than lotion, creams are ideal for dry skin as they provide more intensive moisturization.\",\r\n        \"Butter\": \"Even thicker than creams, butters are used for very dry skin areas, providing deep nourishment and hydration.\",\r\n        \"Balm\": \"A dense, oil-based product, balms are used for intense healing and protection, often in specific areas.\",\r\n        \"Face Oil\": \"Provides intensive hydration and nourishment, especially beneficial for dry or mature skin.\",\r\n        //cleanser: \"Used to remove dirt, oil, and makeup from the skin. It helps in keeping the pores clear and the skin clean.\",\r\n    };\r\n\r\n    const handleSelection = (product) => {\r\n        setSelectedProduct(product);\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        setProductData(selectedProduct); \r\n        // Navigate to the next form or a summary page\r\n        navigate('/summary'); // Replace '/summary' with the path of your next step\r\n    };\r\n\r\n    return (\r\n        <div className=\"product-container\">\r\n            <h2>Select a Skincare Product</h2>\r\n            <form onSubmit={handleSubmit}>\r\n                {Object.entries(skincareProducts).map(([key, description]) => (\r\n                    <div key={key}>\r\n                        <button type=\"button\" onClick={() => handleSelection(key)}\r\n                            className={selectedProduct === key ? 'selected' : ''}>\r\n                            {key.charAt(0).toUpperCase() + key.slice(1)}\r\n                        </button>\r\n                        <p className={selectedProduct === key ? 'selected' : ''}>\r\n                            {description}\r\n                        </p>\r\n                    </div>\r\n                ))}\r\n                <button className=\"submit\" type=\"submit\" disabled={!selectedProduct}>Next</button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Product;\r\n","const ingredients = {\r\n    \"Sunflower Oil\": {\r\n        phase: \"oil\",\r\n        hlb: 0,\r\n        description: \"Moisturizer, rich in Vitamin E, non-comedogenic, suitable for sensitive skin.\",\r\n        good_for: [\"Sensitive Skin\", \"Dry skin\"],\r\n        bad_for: []\r\n    },\r\n    \"Jojoba Oil\": {\r\n        phase: \"oil\",\r\n        hlb: 0,\r\n        description: \"Moisturizer, mimics natural skin oils, balances sebum production, good for acne-prone skin.\",\r\n        good_for: [\"Adult acne\", \"Dry skin\", \"Sensitive Skin\"],\r\n        bad_for: []\r\n    },\r\n    \"Argan Oil\": {\r\n        phase: \"oil\",\r\n        hlb: 11,\r\n        description: \"Rich in antioxidants and Vitamin E, moisturizes, reduces signs of aging, improves skin elasticity and enhances hair shine.\",\r\n        good_for: [\"Aging or age spots\", \"Dry skin\", \"Wrinkles\"],\r\n        bad_for: []\r\n    },\r\n    \"Shea Butter\": {\r\n        phase: \"oil\",\r\n        hlb: 8,\r\n        description: \"Moisturizer, rich in fatty acids and vitamins, anti-inflammatory, helps with skin healing.\",\r\n        good_for: [\"Dry skin\", \"Atopic dermatitis\"],\r\n        bad_for: [\"Adult acne\"] // due to its comedogenic properties\r\n    },\r\n    \"Cocoa Butter\": {\r\n        phase: \"oil\",\r\n        hlb: 8,\r\n        description: \"Moisturizer, high in fatty acids, helps to hydrate and nourish the skin, reduces the appearance of scars.\",\r\n        good_for: [\"Dry skin\", \"Wrinkles\"],\r\n        bad_for: [\"Adult acne\"]\r\n    },\r\n    \"Coconut Oil\": {\r\n        phase: \"oil\",\r\n        hlb: 8,\r\n        description: \"Moisturizes skin and hair, rich in fatty acids and antioxidants. Can be comedogenic (acne-causing) for some.\",\r\n        good_for: [\"Dry skin\"],\r\n        bad_for: [\"Adult acne\"] // high comedogenic rating\r\n    },\r\n    \"Pecan Oil\": {\r\n        phase: \"oil\",\r\n        hlb: 0,\r\n        description: \"Moisturizer, rich in antioxidants, promotes skin and hair health, hydrating properties.\",\r\n        good_for: [\"Dry skin\"],\r\n        bad_for: []\r\n    },\r\n    \"Pumpkin Seed Oil\": {\r\n        phase: \"oil\",\r\n        hlb: 0,\r\n        description: \"Rich in zinc and vitamins, improves skin tone, fights acne, and soothes sensitive skin.\",\r\n        good_for: [\"Adult acne\", \"Sensitive Skin\"],\r\n        bad_for: []\r\n    },\r\n    /*\"Benne Seed Oil\": {\r\n        phase: \"oil\",\r\n        hlb: 0,\r\n        description: \"Rich in linoleic acid, nourishes skin and strengthens hair.\",\r\n        good_for: [\"Dry skin\"],\r\n        bad_for: []\r\n    },\r\n    \"Okra Seed Oil\": {\r\n        phase: \"oil\",\r\n        hlb: 0,\r\n        description: \"Promotes a healthy scalp and is rich in unsaturated fats. (comedogenic rating estimated)\",\r\n        good_for: [\"Sensitive Skin\"],\r\n        bad_for: [\"Adult acne\"]\r\n    },*/\r\n    \"Olive Oil\": {\r\n        phase: \"oil\",\r\n        hlb: 0,\r\n        description: \"Moisturizer, rich in vitamins and antioxidants, promotes skin and hair health, but can be comedogenic (acne-causing) for some.\",\r\n        good_for: [\"Dry skin\"],\r\n        bad_for: [\"Adult acne\"]\r\n    },\r\n    /*\"Almond Oil\": {\r\n        phase: \"oil\",\r\n        hlb: 0,\r\n        description: \"Gentle on skin, rich in vitamin E, and excellent for dry skin.\",\r\n        good_for: [\"Dry skin\", \"Sensitive Skin\"],\r\n        bad_for: []\r\n    },*/\r\n    \"Distilled Water\": {\r\n        phase: \"aqueous\",\r\n        hlb: 20,\r\n        description: \"Hydrates and serves as a base for water-soluble ingredients.\",\r\n        good_for: [],\r\n        bad_for: []\r\n    },\r\n    \"Green Tea\": {\r\n        phase: \"aqueous\",\r\n        hlb: 20,\r\n        description: \"Antioxidant-rich, reduces inflammation and redness, can protect against environmental stressors and promotes skin healing.\",\r\n        good_for: [\"Redness\", \"Puffiness\", \"Sensitive Skin\"],\r\n        bad_for: []\r\n    },\r\n    \"Sea Salt\": {\r\n        phase: \"aqueous\",\r\n        hlb: 20,\r\n        description: \"Rich in minerals, helps in detoxifying and cleansing the skin, can balance oil production.\",\r\n        good_for: [\"Large pores\", \"Atopic dermatitis\"],\r\n        bad_for: [\"Dry skin\"] // can be drying\r\n    },\r\n    \"Aloe Vera Gel\": {\r\n        phase: \"aqueous\",\r\n        hlb: 20,\r\n        description: \"Soothes skin irritations, hydrates, promotes healing, good for sunburns and inflammation\",\r\n        good_for: [\"Sensitive Skin\", \"Sun Protection\", \"Redness\"],\r\n        bad_for: []\r\n    },\r\n    \"Glycerin\": {\r\n        phase: \"aqueous\",\r\n        hlb: 20,\r\n        description: \"Humectant, draws moisture into the skin, suitable for all skin types, enhances skin hydration.\",\r\n        good_for: [\"Dry skin\"],\r\n        bad_for: []\r\n    },\r\n    \"Honey\": {\r\n        phase: \"aqueous\",\r\n        hlb: 20,\r\n        description: \"Natural humectant, antibacterial, great for acne treatment and hydration, soothing for the skin.\",\r\n        good_for: [\"Dry skin\", \"Adult acne\"],\r\n        bad_for: []\r\n    },\r\n    \"Apple Cider Vinegar\": {\r\n        phase: \"aqueous\",\r\n        hlb: 20,\r\n        description: \"Balances skin's pH, astringent properties, good for acne-prone skin but can be drying.\",\r\n        good_for: [\"Adult acne\", \"Large pores\"],\r\n        bad_for: [\"Dry skin\"] // can be drying\r\n    },\r\n    \"Cucumber Juice\": {\r\n        phase: \"aqueous\",\r\n        hlb: 20,\r\n        description: \" Hydrating, soothing, rich in vitamins and minerals, good for puffiness and calming irritated skin.\",\r\n        good_for: [\"Puffiness\", \"Sensitive Skin\"],\r\n        bad_for: []\r\n    },\r\n    \"Oat Milk\": {\r\n        phase: \"aqueous\",\r\n        hlb: 20,\r\n        description: \"Contains lipids and water-absorbing substances, providing moisturizing and soothing benefits. Helps in reducing inflammation\",\r\n        good_for: [\"Dry skin\", \"Sensitive Skin\"],\r\n        bad_for: []\r\n    },\r\n    \"Beeswax\": {\r\n        phase: \"emulsifier\",\r\n        hlb: 12,\r\n        description: \" Emulsifier and stabilizer in formulations, creates a protective barrier on the skin, retains moisture.\",\r\n        good_for: [\"Dry skin\"],\r\n        bad_for: []\r\n    },\r\n    \"Lecithin\": {\r\n        phase: \"emulsifier\",\r\n        hlb: 8,\r\n        description: \"Natural stabilizer, thickens formulas and creates protective barrier on skin.\",\r\n        good_for: [],\r\n        bad_for: []\r\n    },\r\n    \"Cetearyl Alcohol\": {\r\n        phase: \"emulsifier\",\r\n        hlb: 16,\r\n        description: \"A waxy fatty alcohol used as an emulsifier, thickener and stabilizer in creams and lotions. Extracted from Coconut and Palm Kernel oils\",\r\n        good_for: [],\r\n        bad_for: [\"Sensitive Skin\"] // can be irritating for some sensitive skins\r\n    },\r\n    \"Castille Soap\": {\r\n        phase: \"surfactant\",\r\n        hlb: \"10\",\r\n        description: \"Gentle and versatile cleanser, made from olive and hemp oils, suitable for sensitive skin.\",\r\n        good_for: [\"Sensitive Skin\"],\r\n        bad_for: []\r\n    },\r\n    \"Zinc Oxide\": {\r\n        phase: \"additive\",\r\n        hlb: 0,\r\n        max_percent: 25,\r\n        default_percent: 10,\r\n        description: \"Sunscreen agent, provides broad-spectrum UV protection, also known for its soothing and astringent properties.\",\r\n        good_for: [\"Sun Protection\"],\r\n        bad_for: []\r\n    },\r\n    \"Hyaluronic Acid\": {\r\n        phase: \"additive\",\r\n        hlb: 20,\r\n        max_percent: 2,\r\n        default_percent: 0.5,\r\n        description: \"Powerful humectant, helps to hydrate and plump the skin by retaining moisture, reduces the appearance of fine lines and wrinkles.\",\r\n        good_for: [\"Dry skin\", \"Wrinkles\", \"Aging or age spots\"],\r\n        bad_for: []\r\n    },\r\n    \"Retinol\": {\r\n        phase: \"additive\",\r\n        hlb: 0,\r\n        max_percent: 1,\r\n        default_percent: 0.1,\r\n        description: \"A form of Vitamin A, helps in skin renewal, boosts collagen production, effective against aging signs. Should be used intermittently until skin aclimates to it. Sun sensitizing, so should only be used at night.\",\r\n        good_for: [\"Wrinkles\", \"Aging or age spots\"],\r\n        bad_for: [\"Sensitive Skin\"] // can be irritating\r\n    },\r\n    \"Vitamin C\": {\r\n        phase: \"additive\",\r\n        hlb: 20,\r\n        max_percent: 20,\r\n        default_percent: 5,\r\n        description: \"Antioxidant, aids in skin repair and regeneration, can help in reducing pigmentation and promoting collagen production.\",\r\n        good_for: [\"Aging or age spots\", \"Sun Protection\"],\r\n        bad_for: []\r\n    },\r\n    \"Vitamin E\": {\r\n        phase: \"additive\",\r\n        hlb: 0,\r\n        max_percent: 1,\r\n        default_percent: 0.5,\r\n        description: \"Antioxidant, helps in protecting the skin from environmental damage, moisturizes, and heals. Extends shelf life of oils.\",\r\n        good_for: [\"Sun Protection\", \"Aging or age spots\"],\r\n        bad_for: []\r\n    },\r\n    \"Niacinamide (Vitamin B3)\": {\r\n        phase: \"additive\",\r\n        hlb: 20,\r\n        max_percent: 5,\r\n        default_percent: 2,\r\n        description: \"Improves appearance of enlarged pores, uneven skin tone, fine lines. Reduces redness and irritation.\",\r\n        good_for: [\"Large pores\", \"Wrinkles\", \"Redness\"],\r\n        bad_for: []\r\n    },\r\n    \"Lavender Oil\": {\r\n        phase: \"additive\",\r\n        hlb: 0,\r\n        max_percent: 1,\r\n        default_percent: 0.5,\r\n        description: \"Calming and relaxing, and can be used to soothe irritated skin. Anti-inflammatory and antimicrobial properties.\",\r\n        good_for: [\"Sensitive Skin\", \"Redness\"],\r\n        bad_for: []\r\n    },\r\n    \"Rosemary Oil\": {\r\n        phase: \"additive\",\r\n        hlb: 0,\r\n        max_percent: 2,\r\n        default_percent: 1,\r\n        description: \"Rejuvenates skin, improves hair growth and scalp health, and has antioxidant properties. Improves circulation and can help with puffiness.\",\r\n        good_for: [\"Aging or age spots\"],\r\n        bad_for: [\"Sensitive Skin\"] // can be irritating for some people\r\n    },\r\n    \"Tea Tree Oil\": {\r\n        phase: \"additive\",\r\n        hlb: 0,\r\n        max_percent: 2,\r\n        default_percent: 1,\r\n        description: \"Antimicrobial and anti-inflammatory, very effective against acne, helps in cleansing the skin.\",\r\n        good_for: [\"Adult acne\"],\r\n        bad_for: [\"Dry skin\"] // can be drying if overused\r\n    },\r\n    \"Jasmine Oil\": {\r\n        phase: \"additive\",\r\n        hlb: 0,\r\n        max_percent: 1,\r\n        default_percent: 0.5,\r\n        description: \"Moisturizes, soothes, often used for its fragrance and hydrating properties.\",\r\n        good_for: [\"Dry skin\"],\r\n        bad_for: []\r\n    },\r\n    \"Eucalyptus Oil\": {\r\n        phase: \"additive\",\r\n        hlb: 0,\r\n        max_percent: 2,\r\n        default_percent: 1,\r\n        description: \"Antiseptic and anti-inflammatory properties, good for healing. Refreshing scent.\",\r\n        good_for: [\"Adult acne\"],\r\n        bad_for: [\"Sensitive Skin\", \"Dry skin\"] // can be irritating and drying\r\n    },\r\n    \"Peppermint Oil\": {\r\n        phase: \"additive\",\r\n        hlb: 0,\r\n        max_percent: 1,\r\n        default_percent: 0.5,\r\n        description: \"Cooling sensation and refreshing scent. It has antiseptic and antimicrobial properties. Can help with acne and oily skin, but can be irritating.\",\r\n        good_for: [\"Adult acne\", \"Puffiness\"],\r\n        bad_for: [\"Sensitive Skin\", \"Redness\"] // can be irritating and cause a burning sensation for sensitive skin types\r\n    },\r\n    \"Pine Oil\": {\r\n        phase: \"additive\",\r\n        hlb: 0,\r\n        max_percent: 1,\r\n        default_percent: 0.5,\r\n        description: \"Known for its invigorating and refreshing scent, has antimicrobial and anti-inflammatory properties. It's often used in skincare for its soothing effects on the skin and its ability to help with respiratory issues.\",\r\n        good_for: [\"Atopic dermatitis\", \"Adult acne\"],\r\n        bad_for: [\"Sensitive Skin\"] // can be irritating due to its potent nature\r\n    },\r\n    \"Cedar Oil\": {\r\n        phase: \"additive\",\r\n        hlb: 0,\r\n        max_percent: 1,\r\n        default_percent: 0.5,\r\n        description: \"With its woodsy aroma, is known for its calming and grounding effects. It has antiseptic, anti-inflammatory, and astringent properties, making it beneficial for skin conditions like acne and aiding in soothing irritated skin.\",\r\n        good_for: [\"Adult acne\", \"Atopic dermatitis\"],\r\n        bad_for: [\"Sensitive Skin\"] // may cause irritation in higher concentrations or sensitive individuals\r\n    },\r\n    \"Rosehip Seed Oil\": {\r\n        phase: \"oil\",\r\n        hlb: 0,\r\n        max_percent: 10,\r\n        default_percent: 2,\r\n        description: \"Rosehip Seed Oil is rich in essential fatty acids and antioxidants. It's renowned for its skin-regenerative properties, aiding in reducing scars and fine lines. High in vitamins A and C, it helps in evening out skin tone and improving hydration.\",\r\n        good_for: [\"Wrinkles\", \"Dry skin\", \"Sun Protection\", \"Aging or age spots\"],\r\n        bad_for: [] // Generally well-tolerated, but always patch test\r\n    },\r\n\r\n    \"Geranium Oil\": {\r\n        phase: \"additive\",\r\n        hlb: 0,\r\n        max_percent: 2,\r\n        default_percent: 0.5,\r\n        description: \"Geranium Oil, known for its floral scent, is used for its astringent, antiseptic, and anti-inflammatory properties. It helps in balancing sebum production, enhancing skin elasticity, and promoting the healing of scars and spots.\",\r\n        good_for: [\"Adult acne\", \"Large pores\", \"Wrinkles\"],\r\n        bad_for: [\"Sensitive Skin\"] // Can be irritating for some sensitive skin types\r\n    },\r\n\r\n    \"Carrot Seed Oil\": {\r\n        phase: \"additive\",\r\n        hlb: 0,\r\n        max_percent: 5,\r\n        default_percent: 1,\r\n        description: \"Carrot Seed Oil is valued for its antioxidant properties and high vitamin A content. It's considered excellent for sun protection, rejuvenating aged skin, and promoting skin healing. Also known for its ability to rejuvenate and regenerate skin tissues.\",\r\n        good_for: [\"Aging or age spots\", \"Sun Protection\", \"Wrinkles\"],\r\n        bad_for: [\"Sensitive Skin\"] // Can be potent; patch test recommended\r\n    },\r\n    /*\"Cedarwood Oil\": {\r\n        phase: \"additive\",\r\n        hlb: 0,\r\n        max_percent: 1,\r\n        default_percent: 0.5,\r\n        description: \"Cedarwood oil is used for its soothing effect on the skin and its woodsy, warm fragrance.\",\r\n        good_for: [\"Dry skin\"],\r\n        bad_for: []\r\n    },\r\n    \"Noble Fir Oil\": {\r\n        phase: \"additive\",\r\n        hlb: 0,\r\n        max_percent: 1,\r\n        default_percent: 0.5,\r\n        description: \"Noble Fir oil is known for its crisp, clean fragrance and can help to refresh and invigorate the skin.\",\r\n        good_for: [],\r\n        bad_for: []\r\n    },\r\n    \"Ponderosa Pine Oil\": {\r\n        phase: \"additive\",\r\n        hlb: 0,\r\n        max_percent: 1,\r\n        default_percent: 0.5,\r\n        description: \"Ponderosa Pine oil, with its fresh forest scent, is used for its invigorating properties and potential skin benefits.\",\r\n        good_for: [],\r\n        bad_for: []\r\n    },*/\r\n    \"Turmeric\": {\r\n        phase: \"additive\",\r\n        hlb: 0,\r\n        max_percent: 1,\r\n        default_percent: 0.5,\r\n        description: \" Anti-inflammatory, antimicrobial, helps in improving skin tone and reducing scars.\",\r\n        good_for: [\"Redness\", \"Adult acne\", \"Atopic dermatitis\"],\r\n        bad_for: []\r\n    },\r\n    \"Cinnamon\": {\r\n        phase: \"additive\",\r\n        hlb: 0,\r\n        max_percent: 0.5,\r\n        default_percent: 0.2,\r\n        description: \"Antimicrobial, stimulates blood flow, but can be irritating to the skin so should be used cautiously.\",\r\n        good_for: [\"Adult acne\"],\r\n        bad_for: [\"Sensitive Skin\", \"Dry skin\"] // potential irritant\r\n    },\r\n    \"Black Pepper\": {\r\n        phase: \"additive\",\r\n        hlb: 0,\r\n        max_percent: 0.5,\r\n        default_percent: 0.2,\r\n        description: \"Antioxidant, stimulating, enhances blood circulation, but can be irritating to sensitive skin.\",\r\n        good_for: [\"Aging or age spots\"],\r\n        bad_for: [\"Sensitive Skin\"] // can be irritating\r\n    },\r\n    \"Nutmeg\": {\r\n        phase: \"additive\",\r\n        hlb: 0,\r\n        max_percent: 0.5,\r\n        default_percent: 0.2,\r\n        description: \"Nutmeg, with its anti-inflammatory and antibacterial properties, is used in small amounts to soothe skin and improve its appearance.\",\r\n        good_for: [\"Redness\", \"Atopic dermatitis\"],\r\n        bad_for: [\"Sensitive Skin\"] // can be irritating in higher concentrations\r\n    },\r\n    \"Tepezcohuite Mimosa Tenuiflora Infusion\": {\r\n        phase: \"aqueous\",\r\n        hlb: 0, // Typically, herbal infusions do not have an HLB value\r\n        max_percent: 10,\r\n        default_percent: 5,\r\n        description: \"Rich in tannins and antioxidants, known for its healing, regenerative, and antimicrobial properties. Used to soothe skin conditions, promote wound healing, and provide anti-aging benefits. Also known as Jurema.\",\r\n        good_for: [\"Atopic dermatitis\", \"Wrinkles\", \"Redness\"],\r\n        bad_for: [\"Sensitive Skin\"] // can be irritating due to tannins\r\n    }\r\n\r\n\r\n};\r\n\r\nexport default ingredients;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport ingredients from './ingredients';\r\n\r\nconst loadingMessages = [\r\n  \"AI is preparing a recipe for you...\",\r\n  \"Considering which ingredients will work best for your concerns...\",\r\n  \"Balancing proportions to ensure proper texture...\",\r\n  \"Optimizing for your skin type...\",\r\n  \"Finalizing the perfect skincare formula...\",\r\n  \"Almost there, just adding the finishing touches...\"\r\n];\r\n\r\nfunction Summary({ goalsData, productData, includeFragrance, selectedMoods }) {\r\n  const navigate = useNavigate();\r\n  const [loading, setLoading] = useState(false);\r\n  const [currentMessage, setCurrentMessage] = useState(loadingMessages[0]);\r\n\r\n\r\n  const handleAIClick = () => {\r\n    setLoading(true);\r\n    setCurrentMessage(loadingMessages[0]);\r\n    const endpoint = 'https://us-central1-skincare-recipe-tool.cloudfunctions.net/getInitialRecipe';\r\n    const goals = goalsData.join(', ');\r\n    const productType = productData;\r\n\r\n\r\n    const fragranceSentence = includeFragrance === 'yes' ? `Essential oils should be added that will make me feel  ${selectedMoods.join(' and ')} .` : 'It should not have fragrance added.';\r\n\r\n    const data = {\r\n      text: `Hello, I am trying to formulate a ${productType} for ${goals}. ${fragranceSentence} Please suggest a recipe?`,\r\n      ingredients: formatIngredientsList(ingredients)\r\n    };\r\n\r\n    console.log('Sending OpenAI request: ', data.text, data.ingredients);\r\n\r\n    fetch(endpoint, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(data)\r\n    })\r\n      .then(response => {\r\n        console.log(response);\r\n        return response.json();\r\n      })\r\n      .then(data => {\r\n        setLoading(false);\r\n        console.log('Success:', data);\r\n        const recipeResponse = data.reply.choices[0].message.content;\r\n        const parsedResponse = JSON.parse(recipeResponse);\r\n        console.log(parsedResponse);\r\n        navigate('/recipe-builder', { state: { recipe: parsedResponse } });\r\n      })\r\n      .catch((error) => {\r\n        setLoading(false);\r\n        console.error('Error:', error);\r\n        // Handle error state here, e.g., display an error message\r\n      });\r\n  };\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    if (loading) {\r\n        const interval = setInterval(() => {\r\n            setCurrentMessage(prevMessage => {\r\n                const index = loadingMessages.indexOf(prevMessage);\r\n                const nextIndex = (index + 1) % loadingMessages.length;\r\n                return loadingMessages[nextIndex];\r\n            });\r\n        }, 4000); // Change message every 4 seconds\r\n\r\n        return () => clearInterval(interval);\r\n    }\r\n  }, [loading]);\r\n\r\n  const handleManualClick = () => {\r\n    navigate('/recipe-builder'); // Replace with your actual route\r\n  };\r\n\r\n  function formatIngredientsList(ingredients) {\r\n    let formattedString = \"\";\r\n\r\n    Object.keys(ingredients).forEach((key, index, array) => {\r\n      formattedString += key;\r\n\r\n      if (ingredients[key].hasOwnProperty('default_percent') || ingredients[key].hasOwnProperty('max_percent')) {\r\n        formattedString += \" (\";\r\n\r\n        if (ingredients[key].hasOwnProperty('default_percent')) {\r\n          formattedString += `default: ${ingredients[key].default_percent}`;\r\n          if (ingredients[key].hasOwnProperty('max_percent')) {\r\n            formattedString += \", \";\r\n          }\r\n        }\r\n\r\n        if (ingredients[key].hasOwnProperty('max_percent')) {\r\n          formattedString += `max: ${ingredients[key].max_percent}`;\r\n        }\r\n\r\n        formattedString += \")\";\r\n      }\r\n\r\n      if (index < array.length - 1) {\r\n        formattedString += \", \";\r\n      }\r\n    });\r\n\r\n    return formattedString;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>Your Selections</h2>\r\n      <h3>Skincare Goals/Concerns:</h3>\r\n      <ul>\r\n        {goalsData.map((item, index) => (\r\n          <li key={index}>{item}</li>\r\n        ))}\r\n      </ul>\r\n\r\n      <h3>Selected Skincare Product:</h3>\r\n      <ul><li>{productData.charAt(0).toUpperCase() + productData.slice(1)}</li></ul>\r\n\r\n      <h3>Include Fragrance: </h3>\r\n      <ul><li>{includeFragrance.charAt(0).toUpperCase() + includeFragrance.slice(1)}</li></ul>\r\n      {includeFragrance === 'yes' && (\r\n        <>\r\n          <h3>Selected Moods:</h3>\r\n          <ul>\r\n            {selectedMoods.map((item, index) => (\r\n              <li key={index}>{item}</li>\r\n            ))}\r\n          </ul>\r\n        </>\r\n      )}\r\n\r\n      {loading ? (\r\n        <div className=\"loading-container\">\r\n          <div className=\"loader\"></div> \r\n          <p className=\"loading-message\">{currentMessage}</p>\r\n        </div>\r\n      ) : (\r\n        <>\r\n          <button onClick={handleAIClick}>Generate a Formulation with AI</button>\r\n          <button onClick={handleManualClick}>Choose Ingredients Manually</button>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Summary;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport ingredients from './ingredients';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\n\r\nfunction RecipeBuilder() {\r\n    const navigate = useNavigate();\r\n    const [selectedIngredients, setSelectedIngredients] = useState([]);\r\n    const [ingredientProportions, setIngredientProportions] = useState({});\r\n    const [currentStep, setCurrentStep] = useState('selectIngredients');\r\n    const [recipeCommentary, setRecipeCommentary] = useState('');\r\n    const [shelfLifeEstimate, setShelfLifeEstimate] = useState('');\r\n    \r\n    const location = useLocation();\r\n    const initialRecipe = location.state?.recipe;\r\n    console.log(location.state);\r\n\r\n    console.log(\"initialRecipe\", initialRecipe);\r\n\r\n\r\n\r\n    // Function to move to the proportion adjustment step\r\n    const goToProportionAdjustment = () => {\r\n        setCurrentStep('adjustProportions');\r\n    };\r\n\r\n    // Function to go back to ingredient selection\r\n    const goBackToSelectIngredients = () => {\r\n        setCurrentStep('selectIngredients');\r\n    };\r\n\r\n    const handleIngredientSelect = (ingredientName) => {\r\n        if (selectedIngredients.includes(ingredientName)) {\r\n            setSelectedIngredients(selectedIngredients.filter(name => name !== ingredientName));\r\n            const newProportions = { ...ingredientProportions };\r\n            delete newProportions[ingredientName];\r\n            setIngredientProportions(newProportions);\r\n        } else {\r\n            setSelectedIngredients([...selectedIngredients, ingredientName]);\r\n            setIngredientProportions({ ...ingredientProportions, [ingredientName]: ingredients[ingredientName].phase === \"additive\" ? ingredients[ingredientName].default_percent : 10 });\r\n        }\r\n    };\r\n\r\n    const redistributeProportions = (adjustedIngredient, adjustedValue) => {\r\n        const totalAdditiveProportion = Object.keys(ingredientProportions)\r\n            .filter(name => isAdditive(name))\r\n            .reduce((acc, name) => acc + ingredientProportions[name], 0);\r\n\r\n        let remainingProportion = 100 - totalAdditiveProportion;\r\n        const nonAdditiveIngredients = selectedIngredients.filter(name => !isAdditive(name));\r\n\r\n        // First, set the adjusted ingredient's value and subtract it from the remaining proportion\r\n        const newProportions = { ...ingredientProportions, [adjustedIngredient]: adjustedValue };\r\n        remainingProportion -= adjustedValue;\r\n\r\n        // Then, distribute the remaining proportion among the other non-additive ingredients\r\n        const totalCurrentNonAdditive = nonAdditiveIngredients\r\n            .filter(name => name !== adjustedIngredient)\r\n            .reduce((acc, name) => acc + newProportions[name], 0);\r\n\r\n        // Prevent negative values during redistribution\r\n        if (totalCurrentNonAdditive > 0) {\r\n            const scaleFactor = remainingProportion / totalCurrentNonAdditive;\r\n            nonAdditiveIngredients.forEach(name => {\r\n                if (name !== adjustedIngredient) {\r\n                    let adjustedProportion = newProportions[name] * scaleFactor;\r\n                    newProportions[name] = adjustedProportion < 0 ? 0 : adjustedProportion;\r\n                }\r\n            });\r\n        } else {\r\n            // If there are no other non-additives, set their proportions to 0\r\n            nonAdditiveIngredients.forEach(name => {\r\n                if (name !== adjustedIngredient) {\r\n                    newProportions[name] = 0;\r\n                }\r\n            });\r\n        }\r\n\r\n        setIngredientProportions(newProportions);\r\n    };\r\n\r\n\r\n\r\n\r\n    const handleSliderChange = (ingredientName, value) => {\r\n        const newValue = parseFloat(value);\r\n        redistributeProportions(ingredientName, newValue);\r\n    };\r\n    const [temporaryInputs, setTemporaryInputs] = useState({});\r\n\r\n    const handleAdditiveChange = (ingredientName, value) => {\r\n        // Update the temporary input state\r\n        setTemporaryInputs({ ...temporaryInputs, [ingredientName]: value });\r\n        // If the value is a valid complete number, update the proportions immediately\r\n        const newValue = parseFloat(value);\r\n        const maxPercent = ingredients[ingredientName].max_percent || 100; // Default to 100 if not specified\r\n        if (!isNaN(newValue) && value.match(/^\\d+(\\.\\d+)?$/)) {\r\n            const boundedValue = newValue > maxPercent ? maxPercent : newValue;\r\n            const newProportions = { ...ingredientProportions, [ingredientName]: boundedValue };\r\n            setIngredientProportions(newProportions);\r\n            redistributeProportions(ingredientName, newValue);\r\n        }\r\n    };\r\n\r\n    const handleAdditiveBlur = (ingredientName) => {\r\n        const value = temporaryInputs[ingredientName];\r\n        const newValue = value ? parseFloat(value) : 0;\r\n        const maxPercent = ingredients[ingredientName].max_percent || 100; // Default to 100 if not specified\r\n        const boundedValue = newValue > maxPercent ? maxPercent : newValue;\r\n        if (!isNaN(boundedValue)) {\r\n            // Update the real proportions and redistribute\r\n            const newProportions = { ...ingredientProportions, [ingredientName]: boundedValue };\r\n            setIngredientProportions(newProportions);\r\n            redistributeProportions(ingredientName, boundedValue);\r\n            if (newValue > maxPercent) {\r\n                // Update the temporary input state\r\n                setTemporaryInputs({ ...temporaryInputs, [ingredientName]: maxPercent });\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n\r\n    const isIngredientSelected = (ingredientName) => {\r\n        return selectedIngredients.includes(ingredientName);\r\n    };\r\n\r\n    const isAdditive = (ingredientName) => {\r\n        const ingredient = ingredients[ingredientName];\r\n        return ingredient ? ingredient.phase === \"additive\" : false;\r\n    };\r\n\r\n    const roundProportions = () => {\r\n        const newProportions = { ...ingredientProportions };\r\n        let roundedTotal = 0;\r\n\r\n        // Round each non-additive proportion\r\n        Object.keys(newProportions).forEach(key => {\r\n            if (!isAdditive(key)) {\r\n                newProportions[key] = Math.round(newProportions[key]);\r\n            }\r\n            roundedTotal += newProportions[key];\r\n        });\r\n\r\n        // Calculate discrepancy and adjust non-additive proportions\r\n        const discrepancy = 100 - roundedTotal;\r\n        const nonAdditiveKeys = Object.keys(newProportions).filter(key => !isAdditive(key));\r\n        const adjustmentPerIngredient = discrepancy / nonAdditiveKeys.length;\r\n\r\n        nonAdditiveKeys.forEach(key => {\r\n            newProportions[key] += adjustmentPerIngredient;\r\n        });\r\n\r\n        // Handle negative proportions\r\n        let negativeSum = 0;\r\n        nonAdditiveKeys.forEach(key => {\r\n            if (newProportions[key] < 0) {\r\n                negativeSum += newProportions[key];\r\n                newProportions[key] = 0;\r\n            }\r\n        });\r\n\r\n        // Redistribute the negative sum among positive non-additive ingredients\r\n        if (negativeSum < 0) {\r\n            const positiveKeys = nonAdditiveKeys.filter(key => newProportions[key] >= 0.01);\r\n            const positiveAdjustment = Math.abs(negativeSum) / positiveKeys.length;\r\n\r\n            positiveKeys.forEach(key => {\r\n                newProportions[key] += positiveAdjustment;\r\n            });\r\n        }\r\n\r\n        // Final check if total exceeds 100%\r\n        const finalTotal = Object.values(newProportions).reduce((acc, val) => acc + val, 0);\r\n        if (finalTotal > 100) {\r\n            const excess = finalTotal - 100;\r\n            const positiveKeys = nonAdditiveKeys.filter(key => newProportions[key] > 0);\r\n            const excessAdjustment = excess / positiveKeys.length;\r\n\r\n            positiveKeys.forEach(key => {\r\n                newProportions[key] -= excessAdjustment;\r\n            });\r\n        }\r\n\r\n        setIngredientProportions(newProportions);\r\n    };\r\n\r\n    const getRecipeAdvice = () => {\r\n        console.log(\"boop\");\r\n    };\r\n\r\n    const handleMouseUp = () => {\r\n        setTimeout(() => {\r\n            roundProportions();\r\n        }, 10); // Delay of 100 milliseconds\r\n    };\r\n\r\n    const calculateTotalPercentage = () => {\r\n        return Object.values(ingredientProportions).reduce((acc, value) => acc + value, 0);\r\n    };\r\n\r\n    const finalizeRecipe = () => {\r\n        roundProportions();\r\n        navigate('/finalize-recipe', { state: { recipe: ingredientProportions, commentary: recipeCommentary } });\r\n    }\r\n\r\n\r\n    const tableStyle = {\r\n        width: '95%', // Ensure the table takes full width\r\n        borderCollapse: 'collapse',\r\n    };\r\n\r\n    const headerStyle = {\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        marginBottom: '10px',\r\n    };\r\n\r\n    const headerWithButtonStyle = {\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        marginBottom: '10px',\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        const newProportions = {};\r\n\r\n        // Set initial proportions for selected ingredients\r\n        selectedIngredients.forEach(ingredient => {\r\n            if (isAdditive(ingredient)) {\r\n                newProportions[ingredient] = 1; // Set initial value for additive\r\n            } else {\r\n                newProportions[ingredient] = 10; // Set initial value for non-additive\r\n            }\r\n        });\r\n\r\n        setIngredientProportions(prevProportions => {\r\n            // Retain the proportions of ingredients that are still selected\r\n            return Object.keys(prevProportions)\r\n                .filter(key => selectedIngredients.includes(key))\r\n                .reduce((acc, key) => {\r\n                    acc[key] = prevProportions[key];\r\n                    return acc;\r\n                }, newProportions);\r\n        });\r\n    }, [selectedIngredients]);\r\n\r\n    const totalPercentage = calculateTotalPercentage();\r\n    const totalPercentageStyle = {\r\n        color: Math.abs(totalPercentage - 100) < 0.01 ? 'black' : 'red',\r\n    };\r\n    \r\n    useEffect(() => {\r\n        console.log(\"useeffectinitialRecipe\", initialRecipe);\r\n        if (initialRecipe) {\r\n            const ingredientsFromResponse = {};\r\n            const selectedIngredientsFromResponse = [];\r\n    \r\n            Object.keys(initialRecipe).forEach(key => {\r\n                if (key === \"commentary\") {\r\n                    setRecipeCommentary(initialRecipe[\"commentary\"]);\r\n                }\r\n                else if (key === \"shelfLifeEstimate\") {\r\n                    setShelfLifeEstimate(initialRecipe[\"shelfLifeEstimate\"]);\r\n                }\r\n                else if ( ingredients[key]) {\r\n                    ingredientsFromResponse[key] = initialRecipe[key];\r\n                    selectedIngredientsFromResponse.push(key);\r\n                } \r\n            });\r\n            console.log(\"ingredientsfromresponse\", ingredientsFromResponse);\r\n            setIngredientProportions(ingredientsFromResponse);\r\n            setSelectedIngredients(selectedIngredientsFromResponse);\r\n\r\n            goToProportionAdjustment();\r\n        }\r\n    }, [initialRecipe]);\r\n\r\n    return (\r\n        <div>\r\n            {currentStep === 'selectIngredients' && (\r\n                <div>\r\n                    <div>\r\n                        <div style={headerWithButtonStyle}>\r\n                            <h3>Available Ingredients:</h3>\r\n                            <button onClick={goToProportionAdjustment}>Adjust Proportions</button>\r\n                            <span></span>\r\n                        </div>\r\n                        {Object.entries(ingredients).map(([name, details]) => (\r\n                            <div className={ (isIngredientSelected(name) ? 'selected' : '') + \" ingredient-row\"}\r\n                                key={name}\r\n                                onClick={() => handleIngredientSelect(name)}\r\n                            >\r\n                                <strong>{name}</strong>\r\n                                <small>{details.description}</small>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            )}\r\n            {currentStep === 'adjustProportions' && (\r\n                <div className=\"recipe-builder-container\">\r\n\r\n                    <div style={headerStyle}>\r\n                        <button onClick={goBackToSelectIngredients}>Back to Ingredients</button>\r\n                        <h3>Proportions:</h3>\r\n                        <span style={totalPercentageStyle} onClick={roundProportions}>{totalPercentage.toFixed(2)}%</span>\r\n                    </div>\r\n                    <div className=\"scrollable-content\">\r\n                    <table style={tableStyle}>\r\n                        <tbody>\r\n                            {selectedIngredients.map(name => (\r\n                                <React.Fragment key={name}>\r\n                                    <tr>\r\n                                        <td>{name}</td>\r\n                                        <td>{ingredientProportions[name].toFixed(2)}%</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td colSpan=\"2\">\r\n                                            {isAdditive(name) ? (\r\n                                                <div style={{ position: 'relative' }}>\r\n                                                    <input\r\n                                                        type=\"text\"\r\n                                                        value={temporaryInputs[name] ?? ingredientProportions[name]}\r\n                                                        onChange={(e) => handleAdditiveChange(name, e.target.value)}\r\n                                                        onBlur={(e) => handleAdditiveBlur(name, e.target.value)}\r\n                                                        style={{ width: '100%', borderColor: ingredientProportions[name] === ingredients[name].max_percent ? 'red' : 'initial' }}\r\n                                                    />\r\n                                                    {ingredientProportions[name] === ingredients[name].max_percent && (\r\n                                                        <span style={{ position: 'absolute', right: 0, top: 0, color: 'red' }}>Max</span>\r\n                                                    )}\r\n                                                </div>\r\n                                            ) : (\r\n                                                <input\r\n                                                    type=\"range\"\r\n                                                    min=\"0\"\r\n                                                    max=\"100\"\r\n                                                    step=\"0.01\"\r\n                                                    value={ingredientProportions[name]}\r\n                                                    onChange={(e) => handleSliderChange(name, e.target.value)}\r\n                                                    onMouseUp={handleMouseUp}\r\n                                                    onTouchEnd={handleMouseUp}\r\n                                                    style={{ width: '100%' }}\r\n                                                />\r\n                                            )}\r\n                                        </td>\r\n                                    </tr>\r\n                                </React.Fragment>\r\n                            ))}\r\n\r\n                        </tbody>\r\n                    </table>\r\n                    {recipeCommentary && (\r\n                        <div className=\"commentary\">\r\n                            <div style={headerWithButtonStyle}>\r\n                                <h3>Commentary:</h3>\r\n                                <button onClick={getRecipeAdvice}>Get Recipe Advice (Coming Soon!)</button>\r\n                            </div>\r\n                            <p>{recipeCommentary}</p>\r\n                            <p>Estimated Shelf Life: {shelfLifeEstimate}</p>\r\n                        </div>\r\n                    )}\r\n                    </div>\r\n                    <button className='submit' onClick={finalizeRecipe}>Finalize Recipe</button>\r\n                </div>\r\n            )}\r\n\r\n\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RecipeBuilder;\r\n","import { initializeApp } from 'firebase/app';\r\nimport { getFirestore } from 'firebase/firestore';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyD-XWrjMOmhRPjjRz-MOA1ARZN_RVwTcbc\",\r\n    authDomain: \"skincare-recipe-tool.firebaseapp.com\",\r\n    projectId: \"skincare-recipe-tool\",\r\n    storageBucket: \"skincare-recipe-tool.appspot.com\",\r\n    messagingSenderId: \"1053752399193\",\r\n    appId: \"1:1053752399193:web:caf58158f655ca8e0f2848\"\r\n};\r\n\r\nconst app = initializeApp(firebaseConfig);\r\nconst db = getFirestore(app);\r\n\r\nexport { db };\r\n","import React, { useState } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { db } from './firebase-config';\r\nimport { doc, setDoc } from 'firebase/firestore'\r\n\r\nfunction FinalizeRecipe() {\r\n    const [recipeName, setRecipeName] = useState('');\r\n    const location = useLocation();\r\n    const navigate = useNavigate();\r\n    const recipe = location.state?.recipe;\r\n    const commentary = location.state?.commentary;\r\n\r\n    // Handler to save the recipe\r\n    const handleConfirmAndSave = async () => {\r\n        try {\r\n            const recipeId = recipeName\r\n                .toLowerCase()\r\n                .replace(/[^a-z0-9]/gi, '') // Strip out all non-alphanumeric characters\r\n                .replace(/ /g, '-') + \"-\" + new Date().getTime();\r\n\r\n            console.log(recipeId);\r\n            console.log(location.state);\r\n            const docRef = await setDoc(doc(db, \"formulations\", recipeId), {\r\n                name: recipeName,\r\n                ingredients: recipe,\r\n                commentary: commentary,\r\n                createdAt: new Date()\r\n            });\r\n            console.log(\"Document written with ID: \", recipeId);\r\n            navigate('/saved-recipe', { state: { recipeId: recipeId } });\r\n        } catch (e) {\r\n            console.error(\"Error adding document: \", e);\r\n            // Show an error message or handle the error as needed\r\n        }\r\n    };\r\n    const handleChangeIngredients = () => {\r\n        navigate('/change-ingredients'); // Navigate to the change ingredients page\r\n    };\r\n\r\n    const handleChangeProportions = () => {\r\n        navigate('/recipe-builder'); // Navigate to the change proportions page\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h2>Name Your Custom Skincare Recipe</h2>\r\n            <input\r\n                type=\"text\"\r\n                placeholder=\"Enter recipe name\"\r\n                value={recipeName}\r\n                onChange={(e) => setRecipeName(e.target.value)}\r\n            />\r\n            <h2>Your Recipe</h2>\r\n            <div className=\"recipe\">\r\n                {recipe && Object.keys(recipe).map((key, index) => (\r\n                    <div key={index}>\r\n                        <strong>{key}</strong>: {recipe[key]}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n\r\n            <div className=\"actions\">\r\n                <button onClick={handleChangeIngredients}>Change Ingredients</button>\r\n                <button onClick={handleChangeProportions}>Change Proportions</button>\r\n                <button className=\"submit\" onClick={handleConfirmAndSave}>Confirm and Save</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FinalizeRecipe;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { db } from './firebase-config'; // Adjust the path as necessary\r\nimport { doc, getDoc } from 'firebase/firestore';\r\n\r\nfunction SavedRecipe() {\r\n    const [recipeData, setRecipeData] = useState(null);\r\n    const location = useLocation();\r\n    const navigate = useNavigate();\r\n    const recipeId = location.state?.recipeId;\r\n    const [shareButtonText, setShareButtonText] = useState('Share this Recipe');\r\n\r\n    useEffect(() => {\r\n        const searchParams = new URLSearchParams(location.search);\r\n        const paramRecipeId = searchParams.get('recipeId');\r\n        if(paramRecipeId) {\r\n            const fetchData = async () => {\r\n                const docRef = doc(db, \"formulations\", paramRecipeId);\r\n                const docSnap = await getDoc(docRef);\r\n\r\n                if (docSnap.exists()) {\r\n                    setRecipeData(docSnap.data());\r\n                } else {\r\n                    console.log(\"No such document!\");\r\n                }\r\n            };\r\n\r\n            fetchData();\r\n        }\r\n            \r\n        else if (recipeId) {\r\n            const fetchData = async () => {\r\n                const docRef = doc(db, \"formulations\", recipeId);\r\n                const docSnap = await getDoc(docRef);\r\n\r\n                if (docSnap.exists()) {\r\n                    setRecipeData(docSnap.data());\r\n                } else {\r\n                    console.log(\"No such document!\");\r\n                }\r\n            };\r\n\r\n            fetchData();\r\n        }\r\n    }, [recipeId, location.search]);\r\n\r\n    const handleShareRecipe = () => {\r\n        const currentUrl = window.location.href;\r\n        const shareUrl = `${currentUrl}?recipeId=${recipeId}`;\r\n        navigator.clipboard.writeText(shareUrl).then( () => {\r\n            console.log('Recipe URL copied to clipboard!');\r\n            setShareButtonText('Copied!'); // Change button text to 'Copied!'\r\n\r\n            setTimeout(() => {\r\n                setShareButtonText('Share this Recipe');\r\n            }, 3000);\r\n        }).catch( () => {\r\n            console.log('Error copying to clipboard');\r\n        });\r\n    };\r\n\r\n    const handleOrderFormulation = () => {\r\n        navigate('/order-formulation', { state: { recipeId } });\r\n    };\r\n\r\n    if (!recipeData) return <div>Loading...</div>;\r\n\r\n    return (\r\n        <div>\r\n            <h2>{recipeData.name}</h2>\r\n            <div className=\"recipe\">\r\n                {Object.keys(recipeData.ingredients).map((key, index) => (\r\n                    <div key={index}>\r\n                        <strong>{key}</strong>: {recipeData.ingredients[key]}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            <button onClick={handleShareRecipe}>{shareButtonText}</button>\r\n            <button onClick={handleOrderFormulation}>Order Formulation of this Recipe</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SavedRecipe;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { db } from './firebase-config';\r\nimport { doc, getDoc, setDoc } from 'firebase/firestore';\r\n\r\nfunction OrderFormulation() {\r\n    const navigate = useNavigate();\r\n    const [recipeData, setRecipeData] = useState(null);\r\n    const [name, setName] = useState('');\r\n    const [phoneNumber, setPhoneNumber] = useState('');\r\n    const [pickup, setPickup] = useState(true);\r\n    const [address, setAddress] = useState({ street1: '', street2: '', zip: '' });\r\n    const location = useLocation();\r\n    const recipeId = location.state?.recipeId;\r\n\r\n    useEffect(() => {\r\n        if (recipeId) {\r\n            const fetchData = async () => {\r\n                const docRef = doc(db, \"formulations\", recipeId);\r\n                const docSnap = await getDoc(docRef);\r\n\r\n                if (docSnap.exists()) {\r\n                    setRecipeData(docSnap.data());\r\n                } else {\r\n                    console.log(\"No such document!\");\r\n                }\r\n            };\r\n\r\n            fetchData();\r\n        }\r\n    }, [recipeId]);\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        try {\r\n            const orderId = new Date().getTime() + \"=\" + recipeId;\r\n            await await setDoc(doc(db, \"orders\", orderId), {\r\n                name,\r\n                recipeId,\r\n                phoneNumber,\r\n                pickup,\r\n                address: pickup ? null : address,\r\n                createdAt: new Date()\r\n            });\r\n            console.log(\"Order submitted\");\r\n            navigate('/order-success');\r\n        } catch (e) {\r\n            console.error(\"Error submitting order: \", e);\r\n            // Show an error message or handle the error as needed\r\n        }\r\n    };\r\n\r\n    if (!recipeData) return <div>Loading...</div>;\r\n\r\n    return (\r\n        <div>\r\n            <h2>{recipeData.name}</h2>\r\n            <div className=\"recipe\">\r\n                {Object.keys(recipeData.ingredients).map((key, index) => (\r\n                    <div key={index}>\r\n                        <strong>{key}</strong>: {recipeData.ingredients[key]}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            <p>While this service is in development, formulations are free to you! We only ask that you please provide a review of your product and feedback about your experience using the service. (We'll send you a way to access that after we deliver your formulation).</p>\r\n            <p>We currently are only serving people in the Seattle area. <a href=\"#\">Click here</a> to be put on a waiting list for us to formulate and ship your recipe once we have that set up.</p>\r\n            <form onSubmit={handleSubmit}>\r\n                <div>\r\n                    <label>Your Name:</label>\r\n                    <input type=\"text\" value={name} onChange={(e) => setName(e.target.value)} />\r\n                </div>\r\n                <div>\r\n                    <label>Mobile phone number (We'll text with you to coordinate delivery):</label>\r\n                    <input type=\"tel\" value={phoneNumber} onChange={(e) => setPhoneNumber(e.target.value)} />\r\n                </div>\r\n                <div>\r\n                    <label>Are you willing to pick it up from Chris Koss's house?</label>\r\n                    <select value={pickup} onChange={(e) => setPickup(e.target.value === 'true')}>\r\n                        <option value=\"true\">Yes</option>\r\n                        <option value=\"false\">No</option>\r\n                    </select>\r\n                </div>\r\n                {!pickup && (\r\n                    <div>\r\n                        <label>Delivery Address:</label>\r\n                        <input type=\"text\" placeholder=\"Street 1\" value={address.street1} onChange={(e) => setAddress({ ...address, street1: e.target.value })} />\r\n                        <input type=\"text\" placeholder=\"Street 2\" value={address.street2} onChange={(e) => setAddress({ ...address, street2: e.target.value })} />\r\n                        <input type=\"text\" value=\"Seattle\" readOnly />\r\n                        <input type=\"text\" value=\"WA\" readOnly />\r\n                        <input type=\"text\" placeholder=\"Zip Code\" value={address.zip} onChange={(e) => setAddress({ ...address, zip: e.target.value })} />\r\n                    </div>\r\n                )}\r\n                <button type=\"submit\" className=\"submit\">Submit Order</button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default OrderFormulation;\r\n","import React from 'react';\r\n\r\nfunction OrderSuccess() {\r\n    return (\r\n        <div className=\"order-success\">\r\n            <h2>Order Submitted Successfully!</h2>\r\n            <p>Your information has been successfully submitted. Please look out for a text message from Chris.</p>\r\n            <p>Chris will coordinate the mixing time with you, ensuring that your formulation is mixed within 24 hours of when you receive it for maximum freshness.</p>\r\n            <p>Thank you for using our service!</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default OrderSuccess;\r\n","import React, { useState } from 'react';\r\nimport { db } from './firebase-config'; \r\nimport { collection, addDoc } from 'firebase/firestore'\r\n\r\nconst Contact = () => {\r\n  const [phoneNumber, setPhoneNumber] = useState('');\r\n  const [message, setMessage] = useState('');\r\n  const [isSubmitted, setIsSubmitted] = useState(false);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    try {\r\n      await addDoc(collection(db, 'contact-form-submissions'), {\r\n        phoneNumber,\r\n        message,\r\n        createdAt: new Date()\r\n      });\r\n\r\n        setIsSubmitted(true);\r\n    } catch (error) {\r\n      console.error(\"Error adding document: \", error);\r\n    }\r\n  };\r\n\r\n  if (isSubmitted) {\r\n    return <div><h1>Thanks for contacting us! <br /> We'll get back to you soon!</h1>\r\n    <a href=\"/\">Back to home</a>\r\n    </div>;\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className='contact-us-form'>\r\n        <h2>Contact Us</h2>\r\n      <label>\r\n        <strong>Phone number</strong> (if you'd like us to text you a response): <br />\r\n        <input\r\n          type=\"text\"\r\n          value={phoneNumber}\r\n          onChange={(e) => setPhoneNumber(e.target.value)}\r\n        />\r\n      </label>\r\n        <br />\r\n      <label>\r\n        <strong>Message:</strong><br />\r\n        <textarea\r\n          value={message}\r\n          onChange={(e) => setMessage(e.target.value)}\r\n        />\r\n      </label>\r\n      <button type=\"submit\">Submit</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Contact;\r\n","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport { HashRouter as Router, Routes, Route, Link } from 'react-router-dom';\r\nimport Goals from './Goals';\r\nimport Product from './Product';\r\nimport Summary from './Summary';\r\nimport RecipeBuilder from './RecipeBuilder';\r\nimport FinalizeRecipe from './FinalizeRecipe';\r\nimport SavedRecipe from './SavedRecipe';\r\nimport OrderFormulation from './OrderFormulation';\r\nimport OrderSuccess from './OrderSuccess';\r\nimport Contact from './Contact';\r\n\r\n\r\nfunction App() {\r\n  const [goalsData, setGoalsData] = useState([]);\r\n  const [includeFragrance, setIncludeFragrance] = useState('no');\r\n  const [selectedMoods, setSelectedMoods] = useState([]);\r\n  const [productData, setProductData] = useState('');\r\n\r\n  const setIncludeFragranceApp = (fragrance) => {\r\n    setIncludeFragrance(fragrance);\r\n  };\r\n\r\n  const setSelectedMoodsApp = (moods) => {\r\n    setSelectedMoods(moods);\r\n  };\r\n\r\n  // Style for background image\r\n  const homePageStyle = {\r\n    backgroundImage: 'url(\"bgimg.png\")',\r\n    backgroundSize: 'contain',\r\n    backgroundRepeat: 'no-repeat',\r\n    backgroundPosition: 'center top',\r\n    height: '100vh',\r\n    color: '#61685f',\r\n  };\r\n\r\n  return (\r\n    <Router>\r\n      <Routes>\r\n        <Route path=\"/\" element={\r\n          <div style={homePageStyle} className=\"homePageContainer\">\r\n            <div className=\"title\">\r\n              <h1><img src=\"/logo.png\" className=\"logo\"></img> Skincremental</h1>\r\n              <h4>Revolutionizing Skincare, One Batch at a Time!</h4>\r\n            </div>\r\n            <Link to=\"/goals\"><button className=\"startbutton\">Design Custom <br /> Skincare Recipe</button></Link>\r\n            <div className=\"homepageText\">\r\n              <p><strong>Tailored to You, Evolving with You:</strong> <br /> Small batch custom-crafted skincare that adapts to your unique needs, lifestyle, and environmental changes.</p>\r\n              <p><strong>Double the Discovery, Double the Impact:</strong> <br /> Embark on a skincare adventure with every order as you try two variations of your custom formulation. Use, assess, and let us know your favorite. Our AI assistant will refine your choice into two new exploratory batches for your next order. Your skincare journey is an ongoing adventure of discovery and optimization.</p>\r\n              <p><strong>Tired of skincare cluttered with unnecessary preservatives, stabilizers and cheap synthetic fillers?</strong> We are too! Our mission is to provide you with skincare essentials free from the non-beneficial ingredients that are only added so it can sit in a warehouse for a year before it reaches you.  Our commitment to using only deeply nourishing ingredients means your skin receives only the best.</p>\r\n              <p><strong>Knowledge is Power, Especially for Your Skin:</strong>  Dive into the world of ingredients without the complexity. As you customize your formulation, we'll guide you through each ingredient's purpose. Say goodbye to mystery chemicals and hello to informed skincare choices.</p>\r\n              <p><strong>Empowered by AI:</strong>  Say hello to your new skincare partner, our AI-powered formulation assistant. It's not just about the initial match but how your skincare evolves with you, ensuring you always have the best for your skin.</p>\r\n              <p><strong>Natural Preservation, Naturally Better:</strong> Delivering small batches within days of mixing means minimal need for preservatives. When needed, we opt for natural, plant-based options. Healthier for your skin, gentler on the planet.</p>\r\n              <p><strong>Adapt with the Seasons:</strong> As the seasons change, so should your skincare. We fine-tune your formulation to adapt to seasonal shifts, ensuring your skin always gets what it needs, when it needs it.</p>\r\n              <p><strong>Craft, Share, Earn:</strong> Ready to be a skincare trendsetter? Create and perfect your unique formulation, then share it with the world. Every time someone chooses your creation, you can earn rewards or support a cause close to your heart. Empower your skin and your community!</p>\r\n              <p><strong>Conscious, Clean, and Community-Driven:</strong> We're not just about great skincare; we're about a healthier planet. Our packaging? Recycled, sterilized, and reused for future orders. Our ingredients? We strive to source from local Pacific Northwest small and family-owned businesses whenever possible. For each jar you return for recycling, we’ll donate $1 to a local charity.</p>\r\n              <p><strong>Join the Skincremental Revolution:</strong> Where skincare is more than a routine – it's a dynamic, personalized journey. Be a part of a community that chooses sustainability, customization, and innovation.</p>\r\n            </div>\r\n            <Link to=\"/goals\"><button className=\"bottomstartbutton\">Begin Your Skincare Journey</button></Link>\r\n            <Link to=\"/contact\"><a href=\"/contact\">Contact us</a></Link>\r\n          </div>\r\n        } />\r\n        <Route path=\"/goals\" element={\r\n          <Goals setGoalsData={setGoalsData}\r\n            setIncludeFragranceApp={setIncludeFragranceApp}\r\n            setSelectedMoodsApp={setSelectedMoodsApp} />\r\n        } />\r\n        <Route path=\"/product\" element={<Product setProductData={setProductData} />} />\r\n        <Route path=\"/summary\" element={<Summary goalsData={goalsData}\r\n          productData={productData}\r\n          includeFragrance={includeFragrance}\r\n          selectedMoods={selectedMoods} />} />\r\n        <Route path=\"/recipe-builder\" element={<RecipeBuilder />} />\r\n        <Route path=\"/finalize-recipe\" element={<FinalizeRecipe />} />\r\n        <Route path=\"/saved-recipe\" element={<SavedRecipe />} />\r\n        <Route path=\"/order-formulation\" element={<OrderFormulation />} />\r\n        <Route path=\"/order-success\" element={<OrderSuccess />} />\r\n        <Route path=\"/contact\" element={<Contact />}/>\r\n      </Routes>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
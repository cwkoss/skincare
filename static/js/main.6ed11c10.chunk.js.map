{"version":3,"sources":["Goals.js","Product.js","ingredients.js","Summary.js","RecipeBuilder.js","firebase-config.js","FinalizeRecipe.js","SavedRecipe.js","OrderFormulation.js","OrderSuccess.js","App.js","reportWebVitals.js","index.js"],"names":["Goals","_ref","setGoalsData","setSelectedMoodsApp","setIncludeFragranceApp","navigate","useNavigate","selectedOptions","setSelectedOptions","useState","includeFragrance","setIncludeFragrance","selectedMoods","setSelectedMoods","isMoodSelected","mood","includes","React","createElement","onSubmit","e","preventDefault","map","goal","index","key","type","onClick","option","newSelectedOptions","filter","item","toggleOption","className","concat","newSelectedMoods","toggleMood","disabled","length","Product","setProductData","selectedProduct","setSelectedProduct","Object","entries","_ref2","description","charAt","toUpperCase","slice","ingredients","phase","hlb","max_percent","default_percent","loadingMessages","Summary","goalsData","productData","loading","setLoading","currentMessage","setCurrentMessage","formatIngredientsList","formattedString","keys","forEach","array","hasOwnProperty","useEffect","interval","setInterval","prevMessage","nextIndex","indexOf","clearInterval","Fragment","handleAIClick","goals","join","productType","fragranceSentence","data","text","console","log","fetch","method","headers","body","JSON","stringify","then","response","json","recipeResponse","reply","choices","message","content","parsedResponse","parse","state","recipe","catch","error","handleManualClick","RecipeBuilder","_location$state","selectedIngredients","setSelectedIngredients","ingredientProportions","setIngredientProportions","currentStep","setCurrentStep","recipeCommentary","setRecipeCommentary","shelfLifeEstimate","setShelfLifeEstimate","location","useLocation","initialRecipe","goToProportionAdjustment","redistributeProportions","adjustedIngredient","adjustedValue","remainingProportion","name","isAdditive","reduce","acc","nonAdditiveIngredients","newProportions","totalCurrentNonAdditive","scaleFactor","adjustedProportion","temporaryInputs","setTemporaryInputs","ingredientName","ingredient","roundProportions","roundedTotal","Math","round","discrepancy","nonAdditiveKeys","adjustmentPerIngredient","negativeSum","positiveKeys","positiveAdjustment","abs","finalTotal","values","val","excess","excessAdjustment","handleMouseUp","setTimeout","headerWithButtonStyle","display","justifyContent","alignItems","marginBottom","prevProportions","totalPercentage","value","totalPercentageStyle","color","ingredientsFromResponse","selectedIngredientsFromResponse","push","style","details","handleIngredientSelect","goBackToSelectIngredients","toFixed","width","borderCollapse","_temporaryInputs$name","colSpan","position","onChange","handleAdditiveChange","newValue","parseFloat","maxPercent","isNaN","match","boundedValue","target","onBlur","handleAdditiveBlur","borderColor","right","top","min","max","step","handleSliderChange","onMouseUp","onTouchEnd","getRecipeAdvice","finalizeRecipe","commentary","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","db","getFirestore","FinalizeRecipe","_location$state2","recipeName","setRecipeName","placeholder","handleChangeIngredients","handleChangeProportions","async","docRef","addDoc","collection","id","recipeId","SavedRecipe","recipeData","setRecipeData","shareButtonText","setShareButtonText","paramRecipeId","URLSearchParams","search","get","doc","docSnap","getDoc","exists","fetchData","handleShareRecipe","currentUrl","window","href","shareUrl","navigator","clipboard","writeText","handleOrderFormulation","OrderFormulation","setName","phoneNumber","setPhoneNumber","pickup","setPickup","address","setAddress","street1","street2","zip","readOnly","OrderSuccess","App","Router","Routes","Route","path","element","backgroundImage","backgroundSize","backgroundRepeat","backgroundPosition","height","Link","to","fragrance","moods","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"2PAiGeA,MA7Ff,SAAcC,GAAiE,IAAhE,aAAEC,EAAY,oBAAEC,EAAmB,uBAAEC,GAAwBH,EAC1E,MAAMI,EAAWC,eACVC,EAAiBC,GAAsBC,mBAAS,KAChDC,EAAkBC,GAAuBF,mBAAS,OAClDG,EAAeC,GAAoBJ,mBAAS,IAgC7CK,EAAkBC,GACfH,EAAcI,SAASD,GAWhC,OACEE,IAAAC,cAAA,WACED,IAAAC,cAAA,UAAI,uCACJD,IAAAC,cAAA,QAAMC,SAXYC,IACpBA,EAAEC,iBACFnB,EAAaK,GACbJ,EAAoBS,GACpBR,EAAuBM,GACvBL,EAAS,cAvCW,CACpB,aAAc,WAAY,iBAAkB,WAC5C,YAAa,UAAW,iBAAkB,qBAAsB,cAChE,qBA2CmBiB,IAAI,CAACC,EAAMC,KACxBP,WAAAC,cAAA,UACEO,IAAKD,EACLE,KAAK,SACLC,QAASA,IAxCGC,KACpB,MAAMC,EAAqBtB,EAAgBS,SAASY,GAChDrB,EAAgBuB,OAAOC,GAAQA,IAASH,GACxC,IAAIrB,EAAiBqB,GAEzBpB,EAAmBqB,IAmCIG,CAAaT,GAC5BU,UAAS,gBAAAC,QAjCON,EAiC4BL,EAhC7ChB,EAAgBS,SAASY,GAgC4B,WAAa,MAEhEL,GAnCeK,QAwCpBX,IAAAC,cAAA,WACED,IAAAC,cAAA,UAAI,+BACJD,IAAAC,cAAA,UAAQQ,KAAK,SAASC,QAASA,IAAMhB,EAAoB,OAAQsB,UAAS,gBAAAC,OAAuC,QAArBxB,EAA6B,WAAa,KAAM,OAC5IO,IAAAC,cAAA,UAAQQ,KAAK,SAASC,QAASA,IAAMhB,EAAoB,MAAOsB,UAAS,gBAAAC,OAAuC,OAArBxB,EAA4B,WAAa,KAAM,OAItH,QAArBA,GACCO,IAAAC,cAAA,WACED,IAAAC,cAAA,UAAI,mDA7DA,CACZ,QAAS,WAAY,cAAe,WAAY,UAAW,YAAa,YAAa,cAAe,aA6DrFI,IAAI,CAACP,EAAMS,IAChBP,IAAAC,cAAA,UACEO,IAAKD,EACLE,KAAK,SACLC,QAASA,IAlDHZ,KAClB,MAAMoB,EAAmBvB,EAAcI,SAASD,GAC5CH,EAAckB,OAAOC,GAAQA,IAAShB,GACtC,IAAIH,EAAeG,GAEvBF,EAAiBsB,IA6CUC,CAAWrB,GAC1BkB,UAAS,gBAAAC,OAAkBpB,EAAeC,GAAQ,WAAa,KAE9DA,KAMTE,IAAAC,cAAA,UAAQe,UAAU,SAASP,KAAK,SAASW,SAAqC,IAA3B9B,EAAgB+B,QAAsC,QAArB5B,GAAuD,IAAzBE,EAAc0B,QAAe,WCnCxIC,MArDf,SAAgBtC,GAAsB,IAArB,eAAEuC,GAAgBvC,EAC/B,MAAMI,EAAWC,eACVmC,EAAiBC,GAAsBjC,mBAAS,IA8BvD,OACIQ,IAAAC,cAAA,OAAKe,UAAU,qBACXhB,IAAAC,cAAA,UAAI,6BACJD,IAAAC,cAAA,QAAMC,SAVQC,IAClBA,EAAEC,iBACFmB,EAAeC,GAEfpC,EAAS,cAOAsC,OAAOC,QAhCK,CASrB,OAAW,8GACX,MAAS,oGACT,OAAU,gHACV,KAAQ,0GACR,WAAY,gGAmB8BtB,IAAIuB,IAAA,IAAEpB,EAAKqB,GAAYD,EAAA,OACrD5B,IAAAC,cAAA,OAAKO,IAAKA,GACNR,IAAAC,cAAA,UAAQQ,KAAK,SAASC,QAASA,KAhB/Ce,EAgBqEjB,IACjDQ,UAAWQ,IAAoBhB,EAAM,WAAa,IACjDA,EAAIsB,OAAO,GAAGC,cAAgBvB,EAAIwB,MAAM,IAE7ChC,IAAAC,cAAA,KAAGe,UAAWQ,IAAoBhB,EAAM,WAAa,IAChDqB,MAIb7B,IAAAC,cAAA,UAAQe,UAAU,SAASP,KAAK,SAASW,UAAWI,GAAiB,WC8MtES,MAhQK,CAChB,gBAAiB,CACbC,MAAO,MACPC,IAAK,EACLN,YAAa,kEAEjB,aAAc,CACVK,MAAO,MACPC,IAAK,EACLN,YAAa,+DAEjB,YAAa,CACTK,MAAO,MACPC,IAAK,GACLN,YAAa,+DAEjB,cAAe,CACXK,MAAO,MACPC,IAAK,EACLN,YAAa,sEAEjB,eAAgB,CACZK,MAAO,MACPC,IAAK,EACLN,YAAa,gEAEjB,cAAe,CACXK,MAAO,MACPC,IAAK,EACLN,YAAa,oEAEjB,YAAa,CACTK,MAAO,MACPC,IAAK,EACLN,YAAa,qEAEjB,mBAAoB,CAChBK,MAAO,MACPC,IAAK,EACLN,YAAa,gEAEjB,iBAAkB,CACdK,MAAO,MACPC,IAAK,EACLN,YAAa,+DAEjB,gBAAiB,CACbK,MAAO,MACPC,IAAK,EACLN,YAAa,4FAEjB,YAAa,CACTK,MAAO,MACPC,IAAK,EACLN,YAAa,iEAEjB,aAAc,CACVK,MAAO,MACPC,IAAK,EACLN,YAAa,kEAEjB,kBAAmB,CACfK,MAAO,UACPC,IAAK,GACLN,YAAa,gEAEjB,YAAa,CACTK,MAAO,UACPC,IAAK,GACLN,YAAa,0EAEjB,WAAY,CACRK,MAAO,UACPC,IAAK,GACLN,YAAa,seAEjB,gBAAiB,CACbK,MAAO,UACPC,IAAK,GACLN,YAAa,mEAEjB,SAAY,CACRK,MAAO,UACPC,IAAK,GACLN,YAAa,+EAEjB,MAAS,CACLK,MAAO,UACPC,IAAK,GACLN,YAAa,2EAEjB,sBAAuB,CACnBK,MAAO,UACPC,IAAK,GACLN,YAAa,mFAEjB,iBAAkB,CACdK,MAAO,UACPC,IAAK,GACLN,YAAa,wEAEjB,WAAY,CACRK,MAAO,UACPC,IAAK,GACLN,YAAa,iGAEjB,QAAW,CACPK,MAAO,aACPC,IAAK,GACLN,YAAa,iFAEjB,SAAY,CACRK,MAAO,aACPC,IAAK,EACLN,YAAa,uHAEjB,mBAAoB,CAChBK,MAAO,aACPC,IAAK,GACLN,YAAa,2LAEjB,gBAAiB,CACbK,MAAO,aACPC,IAAK,KACLN,YAAa,2LAEjB,aAAc,CACVK,MAAO,WACPC,IAAK,EACLC,YAAa,GACbC,gBAAiB,GACjBR,YAAa,YAEjB,kBAAmB,CACfK,MAAO,WACPC,IAAK,GACLC,YAAa,EACbC,gBAAiB,GACjBR,YAAa,iKAEjB,QAAW,CACPK,MAAO,WACPC,IAAK,EACLC,YAAa,EACbC,gBAAiB,GACjBR,YAAa,uNAEjB,YAAa,CACTK,MAAO,WACPC,IAAK,GACLC,YAAa,GACbC,gBAAiB,EACjBR,YAAa,kIAEjB,YAAa,CACTK,MAAO,WACPC,IAAK,EACLC,YAAa,EACbC,gBAAiB,GACjBR,YAAa,2LAEjB,2BAA4B,CACxBK,MAAO,WACPC,IAAK,GACLC,YAAa,EACbC,gBAAiB,EACjBR,YAAa,qOAEjB,eAAgB,CACZK,MAAO,WACPC,IAAK,EACLC,YAAa,EACbC,gBAAiB,GACjBR,YAAa,2GAEjB,eAAgB,CACZK,MAAO,WACPC,IAAK,EACLC,YAAa,EACbC,gBAAiB,EACjBR,YAAa,qHAEjB,eAAgB,CACZK,MAAO,WACPC,IAAK,EACLC,YAAa,EACbC,gBAAiB,EACjBR,YAAa,+HAEjB,cAAe,CACXK,MAAO,WACPC,IAAK,EACLC,YAAa,EACbC,gBAAiB,GACjBR,YAAa,iGAEjB,iBAAkB,CACdK,MAAO,WACPC,IAAK,EACLC,YAAa,EACbC,gBAAiB,EACjBR,YAAa,2GAEjB,gBAAiB,CACbK,MAAO,WACPC,IAAK,EACLC,YAAa,EACbC,gBAAiB,GACjBR,YAAa,6FAEjB,gBAAiB,CACbK,MAAO,WACPC,IAAK,EACLC,YAAa,EACbC,gBAAiB,GACjBR,YAAa,0GAEjB,qBAAsB,CAClBK,MAAO,WACPC,IAAK,EACLC,YAAa,EACbC,gBAAiB,GACjBR,YAAa,yHAEjB,SAAY,CACRK,MAAO,WACPC,IAAK,EACLC,YAAa,EACbC,gBAAiB,GACjBR,YAAa,gIAEjB,SAAY,CACRK,MAAO,WACPC,IAAK,EACLC,YAAa,GACbC,gBAAiB,GACjBR,YAAa,iJAEjB,eAAgB,CACZK,MAAO,WACPC,IAAK,EACLC,YAAa,GACbC,gBAAiB,GACjBR,YAAa,iIAEjB,OAAU,CACNK,MAAO,WACPC,IAAK,EACLC,YAAa,GACbC,gBAAiB,GACjBR,YAAa,yICtPrB,MAAMS,EAAkB,CACtB,sCACA,oEACA,oDACA,mCACA,6CACA,sDA8IaC,MA3If,SAAgBvD,GAA+D,IAA9D,UAAEwD,EAAS,YAAEC,EAAW,iBAAEhD,EAAgB,cAAEE,GAAeX,EAC1E,MAAMI,EAAWC,eACVqD,EAASC,GAAcnD,oBAAS,IAChCoD,EAAgBC,GAAqBrD,mBAAS8C,EAAgB,IAgErE,SAASQ,EAAsBb,GAC7B,IAAIc,EAAkB,GA2BtB,OAzBArB,OAAOsB,KAAKf,GAAagB,QAAQ,CAACzC,EAAKD,EAAO2C,KAC5CH,GAAmBvC,GAEfyB,EAAYzB,GAAK2C,eAAe,oBAAsBlB,EAAYzB,GAAK2C,eAAe,kBACxFJ,GAAmB,KAEfd,EAAYzB,GAAK2C,eAAe,qBAClCJ,GAAe,YAAA9B,OAAgBgB,EAAYzB,GAAK6B,iBAC5CJ,EAAYzB,GAAK2C,eAAe,iBAClCJ,GAAmB,OAInBd,EAAYzB,GAAK2C,eAAe,iBAClCJ,GAAe,QAAA9B,OAAYgB,EAAYzB,GAAK4B,cAG9CW,GAAmB,KAGjBxC,EAAQ2C,EAAM7B,OAAS,IACzB0B,GAAmB,QAIhBA,EAGT,OAjDAK,oBAAU,KACR,GAAIV,EAAS,CACT,MAAMW,EAAWC,YAAY,KACzBT,EAAkBU,IACd,MACMC,GADQlB,EAAgBmB,QAAQF,GACX,GAAKjB,EAAgBjB,OAChD,OAAOiB,EAAgBkB,MAE5B,KAEH,MAAO,IAAME,cAAcL,KAE9B,CAACX,IAsCF1C,IAAAC,cAAA,WACED,IAAAC,cAAA,UAAI,mBACJD,IAAAC,cAAA,UAAI,4BACJD,IAAAC,cAAA,UACGuC,EAAUnC,IAAI,CAACS,EAAMP,IACpBP,IAAAC,cAAA,MAAIO,IAAKD,GAAQO,KAIrBd,IAAAC,cAAA,UAAI,8BACJD,IAAAC,cAAA,UAAID,IAAAC,cAAA,UAAKwC,EAAYX,OAAO,GAAGC,cAAgBU,EAAYT,MAAM,KAEjEhC,IAAAC,cAAA,UAAI,uBACJD,IAAAC,cAAA,UAAID,IAAAC,cAAA,UAAKR,EAAiBqC,OAAO,GAAGC,cAAgBtC,EAAiBuC,MAAM,KACrD,QAArBvC,GACCO,IAAAC,cAAAD,IAAA2D,SAAA,KACE3D,IAAAC,cAAA,UAAI,mBACJD,IAAAC,cAAA,UACGN,EAAcU,IAAI,CAACS,EAAMP,IACxBP,IAAAC,cAAA,MAAIO,IAAKD,GAAQO,MAMxB4B,EACC1C,IAAAC,cAAA,OAAKe,UAAU,qBACbhB,IAAAC,cAAA,OAAKe,UAAU,WACfhB,IAAAC,cAAA,KAAGe,UAAU,mBAAmB4B,IAGlC5C,IAAAC,cAAAD,IAAA2D,SAAA,KACE3D,IAAAC,cAAA,UAAQS,QA7HMkD,KACpBjB,GAAW,GACXE,EAAkBP,EAAgB,IAClC,MACMuB,EAAQrB,EAAUsB,KAAK,MACvBC,EAActB,EAGduB,EAAyC,QAArBvE,EAA0B,0DAAAwB,OAA6DtB,EAAcmE,KAAK,SAAQ,MAAO,sCAE7IG,EAAO,CACXC,KAAK,qCAADjD,OAAuC8C,EAAW,SAAA9C,OAAQ4C,EAAK,MAAA5C,OAAK+C,EAAiB,6BACzF/B,YAAaa,EAAsBb,IAGrCkC,QAAQC,IAAI,2BAA4BH,EAAKC,KAAMD,EAAKhC,aAExDoC,MAdiB,+EAcD,CACdC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAUT,KAEpBU,KAAKC,IACJT,QAAQC,IAAIQ,GACLA,EAASC,SAEjBF,KAAKV,IACJtB,GAAW,GACXwB,QAAQC,IAAI,WAAYH,GACxB,MAAMa,EAAiBb,EAAKc,MAAMC,QAAQ,GAAGC,QAAQC,QAC/CC,EAAiBV,KAAKW,MAAMN,GAClCX,QAAQC,IAAIe,GACZ/F,EAAS,kBAAmB,CAAEiG,MAAO,CAAEC,OAAQH,OAEhDI,MAAOC,IACN7C,GAAW,GACXwB,QAAQqB,MAAM,SAAUA,OAyFU,wBAChCxF,IAAAC,cAAA,UAAQS,QArEU+E,KACxBrG,EAAS,qBAoEiC,4BCwO/BsG,MAnXf,WAA0B,IAADC,EACrB,MAAMvG,EAAWC,eACVuG,EAAqBC,GAA0BrG,mBAAS,KACxDsG,EAAuBC,GAA4BvG,mBAAS,KAC5DwG,EAAaC,GAAkBzG,mBAAS,sBACxC0G,EAAkBC,GAAuB3G,mBAAS,KAClD4G,EAAmBC,GAAwB7G,mBAAS,IAErD8G,EAAWC,cACXC,EAA8B,QAAjBb,EAAGW,EAASjB,aAAK,IAAAM,OAAA,EAAdA,EAAgBL,OACtCnB,QAAQC,IAAIkC,EAASjB,OAErBlB,QAAQC,IAAI,gBAAiBoC,GAK7B,MAAMC,EAA2BA,KAC7BR,EAAe,sBAoBbS,EAA0BA,CAACC,EAAoBC,KAKjD,IAAIC,EAAsB,IAJMnF,OAAOsB,KAAK8C,GACvCjF,OAAOiG,GAAQC,EAAWD,IAC1BE,OAAO,CAACC,EAAKH,IAASG,EAAMnB,EAAsBgB,GAAO,GAG9D,MAAMI,EAAyBtB,EAAoB/E,OAAOiG,IAASC,EAAWD,IAGxEK,EAAiB,IAAKrB,EAAuB,CAACa,GAAqBC,GACzEC,GAAuBD,EAGvB,MAAMQ,EAA0BF,EAC3BrG,OAAOiG,GAAQA,IAASH,GACxBK,OAAO,CAACC,EAAKH,IAASG,EAAME,EAAeL,GAAO,GAGvD,GAAIM,EAA0B,EAAG,CAC7B,MAAMC,EAAcR,EAAsBO,EAC1CF,EAAuBjE,QAAQ6D,IAC3B,GAAIA,IAASH,EAAoB,CAC7B,IAAIW,EAAqBH,EAAeL,GAAQO,EAChDF,EAAeL,GAAQQ,EAAqB,EAAI,EAAIA,UAK5DJ,EAAuBjE,QAAQ6D,IACvBA,IAASH,IACTQ,EAAeL,GAAQ,KAKnCf,EAAyBoB,KAUtBI,EAAiBC,GAAsBhI,mBAAS,IAuCjDuH,EAAcU,IAChB,MAAMC,EAAazF,EAAYwF,GAC/B,QAAOC,GAAkC,aAArBA,EAAWxF,OAG7ByF,EAAmBA,KACrB,MAAMR,EAAiB,IAAKrB,GAC5B,IAAI8B,EAAe,EAGnBlG,OAAOsB,KAAKmE,GAAgBlE,QAAQzC,IAC3BuG,EAAWvG,KACZ2G,EAAe3G,GAAOqH,KAAKC,MAAMX,EAAe3G,KAEpDoH,GAAgBT,EAAe3G,KAInC,MAAMuH,EAAc,IAAMH,EACpBI,EAAkBtG,OAAOsB,KAAKmE,GAAgBtG,OAAOL,IAAQuG,EAAWvG,IACxEyH,EAA0BF,EAAcC,EAAgB3G,OAE9D2G,EAAgB/E,QAAQzC,IACpB2G,EAAe3G,IAAQyH,IAI3B,IAAIC,EAAc,EASlB,GARAF,EAAgB/E,QAAQzC,IAChB2G,EAAe3G,GAAO,IACtB0H,GAAef,EAAe3G,GAC9B2G,EAAe3G,GAAO,KAK1B0H,EAAc,EAAG,CACjB,MAAMC,EAAeH,EAAgBnH,OAAOL,GAAO2G,EAAe3G,IAAQ,KACpE4H,EAAqBP,KAAKQ,IAAIH,GAAeC,EAAa9G,OAEhE8G,EAAalF,QAAQzC,IACjB2G,EAAe3G,IAAQ4H,IAK/B,MAAME,EAAa5G,OAAO6G,OAAOpB,GAAgBH,OAAO,CAACC,EAAKuB,IAAQvB,EAAMuB,EAAK,GACjF,GAAIF,EAAa,IAAK,CAClB,MAAMG,EAASH,EAAa,IACtBH,EAAeH,EAAgBnH,OAAOL,GAAO2G,EAAe3G,GAAO,GACnEkI,EAAmBD,EAASN,EAAa9G,OAE/C8G,EAAalF,QAAQzC,IACjB2G,EAAe3G,IAAQkI,IAI/B3C,EAAyBoB,IAOvBwB,EAAgBA,KAClBC,WAAW,KACPjB,KACD,KAyBDkB,EAAwB,CAC1BC,QAAS,OACTC,eAAgB,gBAChBC,WAAY,SACZC,aAAc,QAIlB7F,oBAAU,KACN,MAAM+D,EAAiB,GAGvBvB,EAAoB3C,QAAQyE,IACpBX,EAAWW,GACXP,EAAeO,GAAc,EAE7BP,EAAeO,GAAc,KAIrC3B,EAAyBmD,GAEdxH,OAAOsB,KAAKkG,GACdrI,OAAOL,GAAOoF,EAAoB7F,SAASS,IAC3CwG,OAAO,CAACC,EAAKzG,KACVyG,EAAIzG,GAAO0I,EAAgB1I,GACpByG,GACRE,KAEZ,CAACvB,IAEJ,MAAMuD,EApDKzH,OAAO6G,OAAOzC,GAAuBkB,OAAO,CAACC,EAAKmC,IAAUnC,EAAMmC,EAAO,GAqD9EC,EAAuB,CACzBC,MAAOzB,KAAKQ,IAAIc,EAAkB,KAAO,IAAO,QAAU,OA6B9D,OA1BA/F,oBAAU,KAEN,GADAe,QAAQC,IAAI,yBAA0BoC,GAClCA,EAAe,CACf,MAAM+C,EAA0B,GAC1BC,EAAkC,GAExC9H,OAAOsB,KAAKwD,GAAevD,QAAQzC,IACnB,eAARA,EACA2F,EAAoBK,EAA0B,YAEjC,sBAARhG,EACL6F,EAAqBG,EAAiC,mBAEhDvE,EAAYzB,KAClB+I,EAAwB/I,GAAOgG,EAAchG,GAC7CgJ,EAAgCC,KAAKjJ,MAG7C2D,QAAQC,IAAI,0BAA2BmF,GACvCxD,EAAyBwD,GACzB1D,EAAuB2D,GAEvB/C,MAEL,CAACD,IAGAxG,IAAAC,cAAA,WACqB,sBAAhB+F,GACGhG,IAAAC,cAAA,WACID,IAAAC,cAAA,WACID,IAAAC,cAAA,OAAKyJ,MAAOb,GACR7I,IAAAC,cAAA,UAAI,0BACJD,IAAAC,cAAA,UAAQS,QAAS+F,GAA0B,sBAC3CzG,IAAAC,cAAA,cAEHyB,OAAOC,QAAQM,GAAa5B,IAAIrB,IAAA,IAAE8H,EAAM6C,GAAQ3K,EAAA,OAC7CgB,IAAAC,cAAA,OAAKe,WAzKCyG,EAyKiCX,GAxKpDlB,EAAoB7F,SAAS0H,GAwK+B,WAAa,IAAM,mBAC9DjH,IAAKsG,EACLpG,QAASA,IAvQL+G,KAC5B,GAAI7B,EAAoB7F,SAAS0H,GAAiB,CAC9C5B,EAAuBD,EAAoB/E,OAAOiG,GAAQA,IAASW,IACnE,MAAMN,EAAiB,IAAKrB,UACrBqB,EAAeM,GACtB1B,EAAyBoB,QAEzBtB,EAAuB,IAAID,EAAqB6B,IAChD1B,EAAyB,IAAKD,EAAuB,CAAC2B,GAAuD,aAAtCxF,EAAYwF,GAAgBvF,MAAuBD,EAAYwF,GAAgBpF,gBAAkB,MA+PrIuH,CAAuB9C,IAEtC9G,IAAAC,cAAA,cAAS6G,GACT9G,IAAAC,cAAA,aAAQ0J,EAAQ9H,cA9Kd4F,UAoLL,sBAAhBzB,GACGhG,IAAAC,cAAA,OAAKe,UAAU,4BAEXhB,IAAAC,cAAA,OAAKyJ,MA9FD,CAChBZ,QAAS,OACTC,eAAgB,gBAChBC,WAAY,SACZC,aAAc,SA2FEjJ,IAAAC,cAAA,UAAQS,QAxRMmJ,KAC9B5D,EAAe,uBAuR6C,uBAC5CjG,IAAAC,cAAA,UAAI,gBACJD,IAAAC,cAAA,QAAMyJ,MAAOL,EAAsB3I,QAASiH,GAAmBwB,EAAgBW,QAAQ,GAAG,MAE9F9J,IAAAC,cAAA,OAAKe,UAAU,sBACfhB,IAAAC,cAAA,SAAOyJ,MAzGJ,CACfK,MAAO,MACPC,eAAgB,aAwGAhK,IAAAC,cAAA,aACK2F,EAAoBvF,IAAIyG,IAAI,IAAAmD,EAAA,OACzBjK,IAAAC,cAACD,IAAM2D,SAAQ,CAACnD,IAAKsG,GACjB9G,IAAAC,cAAA,UACID,IAAAC,cAAA,UAAK6G,GACL9G,IAAAC,cAAA,UAAK6F,EAAsBgB,GAAMgD,QAAQ,GAAG,MAEhD9J,IAAAC,cAAA,UACID,IAAAC,cAAA,MAAIiK,QAAQ,KACPnD,EAAWD,GACR9G,IAAAC,cAAA,OAAKyJ,MAAO,CAAES,SAAU,aACpBnK,IAAAC,cAAA,SACIQ,KAAK,OACL2I,MAA4B,QAAvBa,EAAE1C,EAAgBT,UAAK,IAAAmD,IAAInE,EAAsBgB,GACtDsD,SAAWjK,GA7OlCkK,EAAC5C,EAAgB2B,KAE1C5B,EAAmB,IAAKD,EAAiB,CAACE,GAAiB2B,IAE3D,MAAMkB,EAAWC,WAAWnB,GACtBoB,EAAavI,EAAYwF,GAAgBrF,aAAe,IAC9D,IAAKqI,MAAMH,IAAalB,EAAMsB,MAAM,iBAAkB,CAClD,MAAMC,EAAeL,EAAWE,EAAaA,EAAaF,EACpDnD,EAAiB,IAAKrB,EAAuB,CAAC2B,GAAiBkD,GACrE5E,EAAyBoB,GACzBT,EAAwBe,EAAgB6C,KAmOqBD,CAAqBvD,EAAM3G,EAAEyK,OAAOxB,OACrDyB,OAAS1K,GAhOjCsH,KACxB,MAAM2B,EAAQ7B,EAAgBE,GACxB6C,EAAWlB,EAAQmB,WAAWnB,GAAS,EACvCoB,EAAavI,EAAYwF,GAAgBrF,aAAe,IACxDuI,EAAeL,EAAWE,EAAaA,EAAaF,EAC1D,IAAKG,MAAME,GAAe,CAEtB,MAAMxD,EAAiB,IAAKrB,EAAuB,CAAC2B,GAAiBkD,GACrE5E,EAAyBoB,GACzBT,EAAwBe,EAAgBkD,GACpCL,EAAWE,GAEXhD,EAAmB,IAAKD,EAAiB,CAACE,GAAiB+C,MAoNJM,CAAmBhE,EAAM3G,EAAEyK,OAAOxB,OACjDM,MAAO,CAAEK,MAAO,OAAQgB,YAAajF,EAAsBgB,KAAU7E,EAAY6E,GAAM1E,YAAc,MAAQ,aAEhH0D,EAAsBgB,KAAU7E,EAAY6E,GAAM1E,aAC/CpC,IAAAC,cAAA,QAAMyJ,MAAO,CAAES,SAAU,WAAYa,MAAO,EAAGC,IAAK,EAAG3B,MAAO,QAAS,QAI/EtJ,IAAAC,cAAA,SACIQ,KAAK,QACLyK,IAAI,IACJC,IAAI,MACJC,KAAK,OACLhC,MAAOtD,EAAsBgB,GAC7BsD,SAAWjK,GAlQhCkL,EAAC5D,EAAgB2B,KACxC,MAAMkB,EAAWC,WAAWnB,GAC5B1C,EAAwBe,EAAgB6C,IAgQqBe,CAAmBvE,EAAM3G,EAAEyK,OAAOxB,OACnDkC,UAAW3C,EACX4C,WAAY5C,EACZe,MAAO,CAAEK,MAAO,iBAU/C7D,GACGlG,IAAAC,cAAA,OAAKe,UAAU,cACXhB,IAAAC,cAAA,OAAKyJ,MAAOb,GACR7I,IAAAC,cAAA,UAAI,eACJD,IAAAC,cAAA,UAAQS,QA5KZ8K,KACpBrH,QAAQC,IAAI,UA2K8C,qCAEtCpE,IAAAC,cAAA,SAAIiG,GACJlG,IAAAC,cAAA,SAAG,yBAAuBmG,KAIlCpG,IAAAC,cAAA,UAAQe,UAAU,SAASN,QArKpB+K,KACnB9D,IACAvI,EAAS,mBAAoB,CAAEiG,MAAO,CAAEC,OAAQQ,EAAuB4F,WAAYxF,OAmKnB,sB,eC5WxE,MASMyF,EAAMC,YATW,CACnBC,OAAQ,0CACRC,WAAY,uCACZC,UAAW,uBACXC,cAAe,mCACfC,kBAAmB,gBACnBC,MAAO,+CAILC,EAAKC,YAAaT,GCmDTU,MA1Df,WAA2B,IAAD1G,EAAA2G,EACtB,MAAOC,EAAYC,GAAiBhN,mBAAS,IACvC8G,EAAWC,cACXnH,EAAWC,cACXiG,EAAuB,QAAjBK,EAAGW,EAASjB,aAAK,IAAAM,OAAA,EAAdA,EAAgBL,OACzBoG,EAA2B,QAAjBY,EAAGhG,EAASjB,aAAK,IAAAiH,OAAA,EAAdA,EAAgBZ,WA0BnC,OACI1L,IAAAC,cAAA,WACID,IAAAC,cAAA,UAAI,oCACJD,IAAAC,cAAA,SACIQ,KAAK,OACLgM,YAAY,oBACZrD,MAAOmD,EACPnC,SAAWjK,GAAMqM,EAAcrM,EAAEyK,OAAOxB,SAE5CpJ,IAAAC,cAAA,UAAI,eACJD,IAAAC,cAAA,OAAKe,UAAU,UACVsE,GAAU5D,OAAOsB,KAAKsC,GAAQjF,IAAI,CAACG,EAAKD,IACrCP,IAAAC,cAAA,OAAKO,IAAKD,GACNP,IAAAC,cAAA,cAASO,GAAa,KAAG8E,EAAO9E,MAK5CR,IAAAC,cAAA,OAAKe,UAAU,WACXhB,IAAAC,cAAA,UAAQS,QA3BYgM,KAC5BtN,EAAS,yBA0ByC,sBAC1CY,IAAAC,cAAA,UAAQS,QAxBYiM,KAC5BvN,EAAS,qBAuByC,sBAC1CY,IAAAC,cAAA,UAAQe,UAAU,SAASN,QA5CVkM,UACzB,IACIzI,QAAQC,IAAIkC,EAASjB,OACrB,MAAMwH,QAAeC,YAAOC,YAAWZ,EAAI,gBAAiB,CACxDrF,KAAMyF,EACNtK,YAAaqD,EACboG,WAAYA,IAEhBvH,QAAQC,IAAI,6BAA8ByI,EAAOG,IACjD5N,EAAS,gBAAiB,CAAEiG,MAAO,CAAE4H,SAAUJ,EAAOG,MACxD,MAAO7M,GACLgE,QAAQqB,MAAM,0BAA2BrF,MAiCqB,uBCyB3D+M,MA9Ef,WAAwB,IAADvH,EACnB,MAAOwH,EAAYC,GAAiB5N,mBAAS,MACvC8G,EAAWC,cACXnH,EAAWC,cACX4N,EAAyB,QAAjBtH,EAAGW,EAASjB,aAAK,IAAAM,OAAA,EAAdA,EAAgBsH,UAC1BI,EAAiBC,GAAsB9N,mBAAS,qBAuDvD,OArDA4D,oBAAU,KACN,MACMmK,EADe,IAAIC,gBAAgBlH,EAASmH,QACfC,IAAI,YACvC,GAAGH,EAAe,CACIX,WACd,MAAMC,EAASc,YAAIxB,EAAI,eAAgBoB,GACjCK,QAAgBC,YAAOhB,GAEzBe,EAAQE,SACRV,EAAcQ,EAAQ3J,QAEtBE,QAAQC,IAAI,sBAIpB2J,QAGC,GAAId,EAAU,CACGL,WACd,MAAMC,EAASc,YAAIxB,EAAI,eAAgBc,GACjCW,QAAgBC,YAAOhB,GAEzBe,EAAQE,SACRV,EAAcQ,EAAQ3J,QAEtBE,QAAQC,IAAI,sBAIpB2J,KAEL,CAACd,EAAU3G,EAASmH,SAqBlBN,EAGDnN,IAAAC,cAAA,WACID,IAAAC,cAAA,UAAKkN,EAAWrG,MAChB9G,IAAAC,cAAA,OAAKe,UAAU,UACVU,OAAOsB,KAAKmK,EAAWlL,aAAa5B,IAAI,CAACG,EAAKD,IAC3CP,IAAAC,cAAA,OAAKO,IAAKD,GACNP,IAAAC,cAAA,cAASO,GAAa,KAAG2M,EAAWlL,YAAYzB,MAI5DR,IAAAC,cAAA,UAAQS,QA/BUsN,KACtB,MAAMC,EAAaC,OAAO5H,SAAS6H,KAC7BC,EAAQ,GAAAnN,OAAMgN,EAAU,cAAAhN,OAAagM,GAC3CoB,UAAUC,UAAUC,UAAUH,GAAUzJ,KAAM,KAC1CR,QAAQC,IAAI,mCACZkJ,EAAmB,WAEnB1E,WAAW,KACP0E,EAAmB,sBACpB,OACJ/H,MAAO,KACNpB,QAAQC,IAAI,kCAoByBiJ,GACrCrN,IAAAC,cAAA,UAAQS,QAjBe8N,KAC3BpP,EAAS,qBAAsB,CAAEiG,MAAO,CAAE4H,gBAgBG,qCAbzBjN,IAAAC,cAAA,WAAK,eC+BlBwO,MA3Ff,WAA6B,IAAD9I,EACxB,MAAMvG,EAAWC,eACV8N,EAAYC,GAAiB5N,mBAAS,OACtCsH,EAAM4H,GAAWlP,mBAAS,KAC1BmP,EAAaC,GAAkBpP,mBAAS,KACxCqP,EAAQC,GAAatP,oBAAS,IAC9BuP,EAASC,GAAcxP,mBAAS,CAAEyP,QAAS,GAAIC,QAAS,GAAIC,IAAK,KAElElC,EAAyB,QAAjBtH,EADGY,cACSlB,aAAK,IAAAM,OAAA,EAAdA,EAAgBsH,SAqCjC,OAnCA7J,oBAAU,KACN,GAAI6J,EAAU,CACQL,WACd,MAAMC,EAASc,YAAIxB,EAAI,eAAgBc,GACjCW,QAAgBC,YAAOhB,GAEzBe,EAAQE,SACRV,EAAcQ,EAAQ3J,QAEtBE,QAAQC,IAAI,sBAIpB2J,KAEL,CAACd,IAoBCE,EAGDnN,IAAAC,cAAA,WACID,IAAAC,cAAA,UAAKkN,EAAWrG,MAChB9G,IAAAC,cAAA,OAAKe,UAAU,UACVU,OAAOsB,KAAKmK,EAAWlL,aAAa5B,IAAI,CAACG,EAAKD,IAC3CP,IAAAC,cAAA,OAAKO,IAAKD,GACNP,IAAAC,cAAA,cAASO,GAAa,KAAG2M,EAAWlL,YAAYzB,MAI5DR,IAAAC,cAAA,SAAG,mQACHD,IAAAC,cAAA,SAAG,6DAA0DD,IAAAC,cAAA,KAAGkO,KAAK,KAAI,cAAc,mGACvFnO,IAAAC,cAAA,QAAMC,SAhCO0M,UACjBzM,EAAEC,iBACF,UACU0M,YAAOC,YAAWZ,EAAI,UAAW,CACnCrF,OACAmG,WACA0B,cACAE,SACAE,QAASF,EAAS,KAAOE,IAE7B5K,QAAQC,IAAI,mBACZhF,EAAS,kBACX,MAAOe,GACLgE,QAAQqB,MAAM,2BAA4BrF,MAoBtCH,IAAAC,cAAA,WACID,IAAAC,cAAA,aAAO,cACPD,IAAAC,cAAA,SAAOQ,KAAK,OAAO2I,MAAOtC,EAAMsD,SAAWjK,GAAMuO,EAAQvO,EAAEyK,OAAOxB,UAEtEpJ,IAAAC,cAAA,WACID,IAAAC,cAAA,aAAO,qEACPD,IAAAC,cAAA,SAAOQ,KAAK,MAAM2I,MAAOuF,EAAavE,SAAWjK,GAAMyO,EAAezO,EAAEyK,OAAOxB,UAEnFpJ,IAAAC,cAAA,WACID,IAAAC,cAAA,aAAO,0DACPD,IAAAC,cAAA,UAAQmJ,MAAOyF,EAAQzE,SAAWjK,GAAM2O,EAA6B,SAAnB3O,EAAEyK,OAAOxB,QACvDpJ,IAAAC,cAAA,UAAQmJ,MAAM,QAAO,OACrBpJ,IAAAC,cAAA,UAAQmJ,MAAM,SAAQ,SAG5ByF,GACE7O,IAAAC,cAAA,WACID,IAAAC,cAAA,aAAO,qBACPD,IAAAC,cAAA,SAAOQ,KAAK,OAAOgM,YAAY,WAAWrD,MAAO2F,EAAQE,QAAS7E,SAAWjK,GAAM6O,EAAW,IAAKD,EAASE,QAAS9O,EAAEyK,OAAOxB,UAC9HpJ,IAAAC,cAAA,SAAOQ,KAAK,OAAOgM,YAAY,WAAWrD,MAAO2F,EAAQG,QAAS9E,SAAWjK,GAAM6O,EAAW,IAAKD,EAASG,QAAS/O,EAAEyK,OAAOxB,UAC9HpJ,IAAAC,cAAA,SAAOQ,KAAK,OAAO2I,MAAM,UAAUgG,UAAQ,IAC3CpP,IAAAC,cAAA,SAAOQ,KAAK,OAAO2I,MAAM,KAAKgG,UAAQ,IACtCpP,IAAAC,cAAA,SAAOQ,KAAK,OAAOgM,YAAY,WAAWrD,MAAO2F,EAAQI,IAAK/E,SAAWjK,GAAM6O,EAAW,IAAKD,EAASI,IAAKhP,EAAEyK,OAAOxB,WAG9HpJ,IAAAC,cAAA,UAAQQ,KAAK,SAASO,UAAU,UAAS,kBAxC7BhB,IAAAC,cAAA,WAAK,eCrClBoP,MAXf,WACI,OACIrP,IAAAC,cAAA,OAAKe,UAAU,iBACXhB,IAAAC,cAAA,UAAI,iCACJD,IAAAC,cAAA,SAAG,oGACHD,IAAAC,cAAA,SAAG,yJACHD,IAAAC,cAAA,SAAG,sCC6DAqP,MAxDf,WACE,MAAO9M,EAAWvD,GAAgBO,mBAAS,KACpCC,EAAkBC,GAAuBF,mBAAS,OAClDG,EAAeC,GAAoBJ,mBAAS,KAC5CiD,EAAalB,GAAkB/B,mBAAS,IAoB/C,OACEQ,IAAAC,cAACsP,IAAM,KACLvP,IAAAC,cAACuP,IAAM,KACLxP,IAAAC,cAACwP,IAAK,CAACC,KAAK,IAAIC,QACd3P,IAAAC,cAAA,OAAKyJ,MAbW,CACpBkG,gBAAiB,mBACjBC,eAAgB,UAChBC,iBAAkB,YAClBC,mBAAoB,aACpBC,OAAQ,QACR1G,MAAO,WAOwBtI,UAAU,qBACnChB,IAAAC,cAAA,UAAI,2BAAwBD,IAAAC,cAAA,WAAM,qBAClCD,IAAAC,cAACgQ,IAAI,CAACC,GAAG,UAASlQ,IAAAC,cAAA,UAAQe,UAAU,eAAc,iBAAchB,IAAAC,cAAA,WAAM,qBACtED,IAAAC,cAAA,SAAG,mDACHD,IAAAC,cAAA,SAAG,kDACHD,IAAAC,cAAA,SAAG,oDAGPD,IAAAC,cAACwP,IAAK,CAACC,KAAK,SAASC,QACnB3P,IAAAC,cAAClB,EAAK,CAACE,aAAcA,EACdE,uBAhCiBgR,IAC9BzQ,EAAoByQ,IAgCPjR,oBA7BckR,IAC3BxQ,EAAiBwQ,QA8BbpQ,IAAAC,cAACwP,IAAK,CAACC,KAAK,WAAWC,QAAS3P,IAAAC,cAACqB,EAAO,CAACC,eAAgBA,MACzDvB,IAAAC,cAACwP,IAAK,CAACC,KAAK,WAAWC,QAAS3P,IAAAC,cAACsC,EAAO,CAACC,UAAWA,EACXC,YAAaA,EACbhD,iBAAkBA,EAClBE,cAAeA,MACxDK,IAAAC,cAACwP,IAAK,CAACC,KAAK,kBAAkBC,QAAS3P,IAAAC,cAACyF,EAAa,QACrD1F,IAAAC,cAACwP,IAAK,CAACC,KAAK,mBAAmBC,QAAS3P,IAAAC,cAACoM,EAAc,QACvDrM,IAAAC,cAACwP,IAAK,CAACC,KAAK,gBAAgBC,QAAS3P,IAAAC,cAACiN,EAAW,QACjDlN,IAAAC,cAACwP,IAAK,CAACC,KAAK,qBAAqBC,QAAS3P,IAAAC,cAACwO,EAAgB,QAC3DzO,IAAAC,cAACwP,IAAK,CAACC,KAAK,iBAAiBC,QAAS3P,IAAAC,cAACoP,EAAY,WCnD5CgB,MAZSC,IAClBA,GAAeA,aAAuBC,UACxC,6BAAqB5L,KAAK3F,IAAkD,IAAjD,OAAEwR,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAAS5R,EACpEwR,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,MCDDO,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHjR,IAAAC,cAACD,IAAMkR,WAAU,KACflR,IAAAC,cAACqP,EAAG,QAORe,M","file":"static/js/main.6ed11c10.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\n\r\nfunction Goals({ setGoalsData, setSelectedMoodsApp, setIncludeFragranceApp }) {\r\n  const navigate = useNavigate();\r\n  const [selectedOptions, setSelectedOptions] = useState([]);\r\n  const [includeFragrance, setIncludeFragrance] = useState('no');\r\n  const [selectedMoods, setSelectedMoods] = useState([]);\r\n\r\n  const skincareGoals = [\r\n    \"Adult acne\", \"Dry skin\", \"Sensitive Skin\", \"Wrinkles\",\r\n    \"Puffiness\", \"Redness\", \"Sun Protection\", \"Aging or age spots\", \"Large pores\",\r\n    \"Atopic dermatitis\"\r\n  ];\r\n\r\n  const moods = [\r\n    \"Fresh\", \"Relaxing\", \"Invigorated\", \"Pampered\", \"Focused\", \"Beautiful\", \"Confident\", \"Rejuvenated\", \"Empowered\"\r\n  ];\r\n\r\n  const toggleOption = (option) => {\r\n    const newSelectedOptions = selectedOptions.includes(option)\r\n      ? selectedOptions.filter(item => item !== option)\r\n      : [...selectedOptions, option];\r\n\r\n    setSelectedOptions(newSelectedOptions);\r\n  };\r\n\r\n  const isOptionSelected = (option) => {\r\n    return selectedOptions.includes(option);\r\n  };\r\n\r\n  const toggleMood = (mood) => {\r\n    const newSelectedMoods = selectedMoods.includes(mood)\r\n      ? selectedMoods.filter(item => item !== mood)\r\n      : [...selectedMoods, mood];\r\n\r\n    setSelectedMoods(newSelectedMoods);\r\n  };\r\n\r\n  const isMoodSelected = (mood) => {\r\n    return selectedMoods.includes(mood);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    setGoalsData(selectedOptions);\r\n    setSelectedMoodsApp(selectedMoods);\r\n    setIncludeFragranceApp(includeFragrance);\r\n    navigate('/product');\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Select Your Skincare Goals/Concerns</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        {skincareGoals.map((goal, index) => (\r\n          <button\r\n            key={index}\r\n            type=\"button\"\r\n            onClick={() => toggleOption(goal)}\r\n            className={`goals-button ${isOptionSelected(goal) ? 'selected' : ''}`}\r\n          >\r\n            {goal}\r\n          </button>\r\n        ))}\r\n\r\n        {/* Fragrance selection */}\r\n        <div>\r\n          <h3>Include natural fragrances?</h3>\r\n          <button type=\"button\" onClick={() => setIncludeFragrance('yes')} className={`goals-button ${includeFragrance === 'yes' ? 'selected' : ''}`}>Yes</button>\r\n          <button type=\"button\" onClick={() => setIncludeFragrance('no')} className={`goals-button ${includeFragrance === 'no' ? 'selected' : ''}`}>No</button>\r\n        </div>\r\n\r\n        {/* Mood selection, shown if fragrance is 'yes' */}\r\n        {includeFragrance === 'yes' && (\r\n          <div>\r\n            <h3>How do you want the fragrance to make you feel?</h3>\r\n            {moods.map((mood, index) => (\r\n              <button\r\n                key={index}\r\n                type=\"button\"\r\n                onClick={() => toggleMood(mood)}\r\n                className={`goals-button ${isMoodSelected(mood) ? 'selected' : ''}`}\r\n              >\r\n                {mood}\r\n              </button>\r\n            ))}\r\n          </div>\r\n        )}\r\n\r\n        <button className=\"submit\" type=\"submit\" disabled={selectedOptions.length === 0 || (includeFragrance === 'yes' && selectedMoods.length === 0)}>Next</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Goals;\r\n","import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nfunction Product({ setProductData }) {\r\n    const navigate = useNavigate();\r\n    const [selectedProduct, setSelectedProduct] = useState('');\r\n\r\n    const skincareProducts = {\r\n\r\n        //toner: \"Applied after cleansing, toner helps to remove any remaining impurities and balances the pH of the skin.\",\r\n        //serum: \"Highly concentrated with active ingredients, serums target specific skin concerns such as aging, hydration, or brightening.\",\r\n        //moisturizer: \"Hydrates the skin and locks in moisture. It can come in various forms like lotions, creams, and gels.\",\r\n        //sunscreen: \"Protects the skin from harmful UV rays. It's essential for preventing sun damage, aging, and skin cancer.\",\r\n        // exfoliant: \"Removes dead skin cells from the surface of the skin, promoting a smoother and clearer complexion.\",\r\n        //eyeCream: \"Specifically formulated for the delicate eye area, it targets concerns like dark circles, puffiness, and wrinkles.\",\r\n        //mask: \"Used occasionally to address specific skin concerns. Masks can hydrate, detoxify, or provide anti-aging benefits.\",\r\n        \"Lotion\" : \"A lightweight moisturizer, often used for normal to oily skin, providing hydration without being too heavy.\",\r\n        \"Cream\": \"Thicker than lotion, creams are ideal for dry skin as they provide more intensive moisturization.\",\r\n        \"Butter\": \"Even thicker than creams, butters are used for very dry skin areas, providing deep nourishment and hydration.\",\r\n        \"Balm\": \"A dense, oil-based product, balms are used for intense healing and protection, often in specific areas.\",\r\n        \"Face Oil\": \"Provides intensive hydration and nourishment, especially beneficial for dry or mature skin.\",\r\n        //cleanser: \"Used to remove dirt, oil, and makeup from the skin. It helps in keeping the pores clear and the skin clean.\",\r\n    };\r\n\r\n    const handleSelection = (product) => {\r\n        setSelectedProduct(product);\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        setProductData(selectedProduct); \r\n        // Navigate to the next form or a summary page\r\n        navigate('/summary'); // Replace '/summary' with the path of your next step\r\n    };\r\n\r\n    return (\r\n        <div className=\"product-container\">\r\n            <h2>Select a Skincare Product</h2>\r\n            <form onSubmit={handleSubmit}>\r\n                {Object.entries(skincareProducts).map(([key, description]) => (\r\n                    <div key={key}>\r\n                        <button type=\"button\" onClick={() => handleSelection(key)}\r\n                            className={selectedProduct === key ? 'selected' : ''}>\r\n                            {key.charAt(0).toUpperCase() + key.slice(1)}\r\n                        </button>\r\n                        <p className={selectedProduct === key ? 'selected' : ''}>\r\n                            {description}\r\n                        </p>\r\n                    </div>\r\n                ))}\r\n                <button className=\"submit\" type=\"submit\" disabled={!selectedProduct}>Next</button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Product;\r\n","const ingredients = {\r\n    \"Sunflower Oil\": {\r\n        phase: \"oil\",\r\n        hlb: 0,\r\n        description: \"Lightweight, non-comedogenic oil, suitable for sensitive skin.\"\r\n    },\r\n    \"Jojoba Oil\": {\r\n        phase: \"oil\",\r\n        hlb: 0,\r\n        description: \"Mimics natural skin oils, balances skin's sebum production.\"\r\n    },\r\n    \"Argan Oil\": {\r\n        phase: \"oil\",\r\n        hlb: 11,\r\n        description: \"Enhances skin elasticity and hair shine, rich in vitamin E.\"\r\n    },\r\n    \"Shea Butter\": {\r\n        phase: \"oil\",\r\n        hlb: 8,\r\n        description: \"Moisturizes deeply, reduces inflammation, and is rich in vitamins.\"\r\n    },\r\n    \"Cocoa Butter\": {\r\n        phase: \"oil\",\r\n        hlb: 8,\r\n        description: \"Nourishes skin, reduces scars, and offers a chocolaty aroma.\"\r\n    },\r\n    \"Coconut Oil\": {\r\n        phase: \"oil\",\r\n        hlb: 8,\r\n        description: \"Moisturizes skin and hair, rich in fatty acids and antioxidants.\"\r\n    },\r\n    \"Pecan Oil\": {\r\n        phase: \"oil\",\r\n        hlb: 0,\r\n        description: \"Rich in antioxidants, moisturizes skin, and promotes hair health.\"\r\n    },\r\n    \"Pumpkin Seed Oil\": {\r\n        phase: \"oil\",\r\n        hlb: 0,\r\n        description: \"Improves skin tone, fights acne, and soothes sensitive skin.\"\r\n    },\r\n    \"Benne Seed Oil\": {\r\n        phase: \"oil\",\r\n        hlb: 0,\r\n        description: \"Rich in linoleic acid, nourishes skin and strengthens hair.\"\r\n    },\r\n    \"Okra Seed Oil\": {\r\n        phase: \"oil\",\r\n        hlb: 0,\r\n        description: \"Promotes a healthy scalp and is rich in unsaturated fats. (comedogenic rating estimated)\"\r\n    },\r\n    \"Olive Oil\": {\r\n        phase: \"oil\",\r\n        hlb: 0,\r\n        description: \"Moisturizes skin, rich in vitamins, and promotes hair health.\"\r\n    },\r\n    \"Almond Oil\": {\r\n        phase: \"oil\",\r\n        hlb: 0,\r\n        description: \"Gentle on skin, rich in vitamin E, and excellent for dry skin.\"\r\n    },\r\n    \"Distilled Water\": {\r\n        phase: \"aqueous\",\r\n        hlb: 20,\r\n        description: \"Hydrates and serves as a base for water-soluble ingredients.\"\r\n    },\r\n    \"Green Tea\": {\r\n        phase: \"aqueous\",\r\n        hlb: 20,\r\n        description: \"Rich in antioxidants, reduces inflammation, and promotes skin healing.\"\r\n    },\r\n    \"Sea Salt\": {\r\n        phase: \"aqueous\",\r\n        hlb: 20,\r\n        description: \"Sea salt, rich in minerals like magnesium, calcium, and potassium, is known for its exfoliating and detoxifying properties. It helps to cleanse pores deeply, balance oil production, and thwart bacteria that can instigate breakouts and acne. Its gentle abrasive texture aids in removing dead skin cells, promoting rejuvenated and smoother skin. Ideal for use in scrubs and bath soaks, sea salt can also help to relieve sore muscles and reduce inflammation when used in bath products.\"\r\n    },\r\n    \"Aloe Vera Gel\": {\r\n        phase: \"aqueous\",\r\n        hlb: 20,\r\n        description: \"Soothes skin irritations, hydrates, and has healing properties.\"\r\n    },\r\n    \"Glycerin\": {\r\n        phase: \"aqueous\",\r\n        hlb: 20,\r\n        description: \"A humectant that draws moisture into the skin, suitable for all skin types.\"\r\n    },\r\n    \"Honey\": {\r\n        phase: \"aqueous\",\r\n        hlb: 20,\r\n        description: \"Natural humectant, known for its soothing and antibacterial properties.\"\r\n    },\r\n    \"Apple Cider Vinegar\": {\r\n        phase: \"aqueous\",\r\n        hlb: 20,\r\n        description: \"Balances skin's pH, has natural astringent properties, and can help clear skin.\"\r\n    },\r\n    \"Cucumber Juice\": {\r\n        phase: \"aqueous\",\r\n        hlb: 20,\r\n        description: \"Rich in vitamins and minerals, hydrating, and soothing for the skin.\"\r\n    },\r\n    \"Oat Milk\": {\r\n        phase: \"aqueous\",\r\n        hlb: 20,\r\n        description: \"Contains lipids and water-absorbing substances, providing moisturizing and soothing benefits.\"\r\n    },\r\n    \"Beeswax\": {\r\n        phase: \"emulsifier\",\r\n        hlb: 12,\r\n        description: \"Natural stabilizer, thickens formulas and creates protective barrier on skin.\"\r\n    },\r\n    \"Lecithin\": {\r\n        phase: \"emulsifier\",\r\n        hlb: 8,\r\n        description: \"Natural stabilizer, thickens formulas and creates protective barrier on skin. (not sure about this viscosity value)\"\r\n    },\r\n    \"Cetearyl Alcohol\": {\r\n        phase: \"emulsifier\",\r\n        hlb: 16,\r\n        description: \"This is a waxy fatty alcohol derived from natural sources like coconut and palm oils. It's used not only as an emulsifier but also as a thickener and stabilizer in creams and lotions.\"\r\n    },\r\n    \"Castille Soap\": {\r\n        phase: \"surfactant\",\r\n        hlb: \"10\",\r\n        description: \"Castille Soap is a gentle and versatile cleanser used in a variety of personal care products. It's known for its mild, skin-friendly properties, making it suitable for sensitive skin.\"\r\n    },\r\n    \"Zinc Oxide\": {\r\n        phase: \"additive\",\r\n        hlb: 0,\r\n        max_percent: 25,\r\n        default_percent: 10,\r\n        description: \"Adds SPF\"\r\n    },\r\n    \"Hyaluronic Acid\": {\r\n        phase: \"additive\",\r\n        hlb: 20,\r\n        max_percent: 2,\r\n        default_percent: 0.5,\r\n        description: \"A powerful humectant, helps to hydrate and plump the skin by retaining moisture, making it a vital ingredient for maintaining a youthful, radiant complexion.\"\r\n    },\r\n    \"Retinol\": {\r\n        phase: \"additive\",\r\n        hlb: 0,\r\n        max_percent: 1,\r\n        default_percent: 0.1,\r\n        description: \"A derivative of Vitamin A, is renowned for its anti-aging properties, as it boosts collagen production, accelerates skin renewal, and helps to reduce the appearance of fine lines, wrinkles, and uneven skin tone.\"\r\n    },\r\n    \"Vitamin C\": {\r\n        phase: \"additive\",\r\n        hlb: 20,\r\n        max_percent: 20,\r\n        default_percent: 5,\r\n        description: \"A potent antioxidant that helps to reduce skin inflammation, irregular pigmentation, and promotes healthy collagen production.\"\r\n    },\r\n    \"Vitamin E\": {\r\n        phase: \"additive\",\r\n        hlb: 0,\r\n        max_percent: 1,\r\n        default_percent: 0.5,\r\n        description: \"A powerful antioxidant that may be effective at reducing UV damage in skin. And vitamin E applied topically may help nourish and protect your skin from damage caused by free radicals.\"\r\n    },\r\n    \"Niacinamide (Vitamin B3)\": {\r\n        phase: \"additive\",\r\n        hlb: 20,\r\n        max_percent: 5,\r\n        default_percent: 2,\r\n        description: \"Niacinamide is a water-soluble vitamin that works with the natural substances in your skin to help visibly improve the appearance of enlarged pores, uneven skin tone, fine lines and wrinkles, dullness, and a weakened surface.\"\r\n    },\r\n    \"Lavender Oil\": {\r\n        phase: \"additive\",\r\n        hlb: 0,\r\n        max_percent: 1,\r\n        default_percent: 0.5,\r\n        description: \"Lavender oil is known for its calming and relaxing properties and can be used to soothe irritated skin.\"\r\n    },\r\n    \"Rosemary Oil\": {\r\n        phase: \"additive\",\r\n        hlb: 0,\r\n        max_percent: 2,\r\n        default_percent: 1,\r\n        description: \"Rosemary oil is reputed to rejuvenate skin, improve hair growth and scalp health, and has antioxidant properties.\"\r\n    },\r\n    \"Tea Tree Oil\": {\r\n        phase: \"additive\",\r\n        hlb: 0,\r\n        max_percent: 2,\r\n        default_percent: 1,\r\n        description: \"Tea tree oil is known for its anti-inflammatory and antimicrobial properties, making it a popular choice for treating acne.\"\r\n    },\r\n    \"Jasmine Oil\": {\r\n        phase: \"additive\",\r\n        hlb: 0,\r\n        max_percent: 1,\r\n        default_percent: 0.5,\r\n        description: \"Jasmine oil is valued for its soothing, moisturizing properties and a rich, floral fragrance.\"\r\n    },\r\n    \"Eucalyptus Oil\": {\r\n        phase: \"additive\",\r\n        hlb: 0,\r\n        max_percent: 2,\r\n        default_percent: 1,\r\n        description: \"Eucalyptus oil has a refreshing scent and is known for its antibacterial, anti-inflammatory properties.\"\r\n    },\r\n    \"Cedarwood Oil\": {\r\n        phase: \"additive\",\r\n        hlb: 0,\r\n        max_percent: 1,\r\n        default_percent: 0.5,\r\n        description: \"Cedarwood oil is used for its soothing effect on the skin and its woodsy, warm fragrance.\"\r\n    },\r\n    \"Noble Fir Oil\": {\r\n        phase: \"additive\",\r\n        hlb: 0,\r\n        max_percent: 1,\r\n        default_percent: 0.5,\r\n        description: \"Noble Fir oil is known for its crisp, clean fragrance and can help to refresh and invigorate the skin.\"\r\n    },\r\n    \"Ponderosa Pine Oil\": {\r\n        phase: \"additive\",\r\n        hlb: 0,\r\n        max_percent: 1,\r\n        default_percent: 0.5,\r\n        description: \"Ponderosa Pine oil, with its fresh forest scent, is used for its invigorating properties and potential skin benefits.\"\r\n    },\r\n    \"Turmeric\": {\r\n        phase: \"additive\",\r\n        hlb: 0,\r\n        max_percent: 1,\r\n        default_percent: 0.5,\r\n        description: \"Turmeric is known for its anti-inflammatory, antimicrobial properties, and ability to improve skin tone and reduce scarring.\"\r\n    },\r\n    \"Cinnamon\": {\r\n        phase: \"additive\",\r\n        hlb: 0,\r\n        max_percent: 0.5,\r\n        default_percent: 0.2,\r\n        description: \"Cinnamon is used for its antimicrobial properties and warming sensation, but should be used with caution as it can be irritating to the skin.\"\r\n    },\r\n    \"Black Pepper\": {\r\n        phase: \"additive\",\r\n        hlb: 0,\r\n        max_percent: 0.5,\r\n        default_percent: 0.2,\r\n        description: \"Black Pepper is known for its antioxidant properties and stimulating effect, which can enhance blood circulation to the skin.\"\r\n    },\r\n    \"Nutmeg\": {\r\n        phase: \"additive\",\r\n        hlb: 0,\r\n        max_percent: 0.5,\r\n        default_percent: 0.2,\r\n        description: \"Nutmeg, with its anti-inflammatory and antibacterial properties, is used in small amounts to soothe skin and improve its appearance.\"\r\n    }\r\n\r\n\r\n};\r\n\r\nexport default ingredients;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport ingredients from './ingredients';\r\n\r\nconst loadingMessages = [\r\n  \"AI is preparing a recipe for you...\",\r\n  \"Considering which ingredients will work best for your concerns...\",\r\n  \"Balancing proportions to ensure proper texture...\",\r\n  \"Optimizing for your skin type...\",\r\n  \"Finalizing the perfect skincare formula...\",\r\n  \"Almost there, just adding the finishing touches...\"\r\n];\r\n\r\nfunction Summary({ goalsData, productData, includeFragrance, selectedMoods }) {\r\n  const navigate = useNavigate();\r\n  const [loading, setLoading] = useState(false);\r\n  const [currentMessage, setCurrentMessage] = useState(loadingMessages[0]);\r\n\r\n\r\n  const handleAIClick = () => {\r\n    setLoading(true);\r\n    setCurrentMessage(loadingMessages[0]);\r\n    const endpoint = 'https://us-central1-skincare-recipe-tool.cloudfunctions.net/getInitialRecipe';\r\n    const goals = goalsData.join(', ');\r\n    const productType = productData;\r\n\r\n\r\n    const fragranceSentence = includeFragrance === 'yes' ? `Essential oils should be added that will make me feel  ${selectedMoods.join(' and ')} .` : 'It should not have fragrance added.';\r\n\r\n    const data = {\r\n      text: `Hello, I am trying to formulate a ${productType} for ${goals}. ${fragranceSentence} Please suggest a recipe?`,\r\n      ingredients: formatIngredientsList(ingredients)\r\n    };\r\n\r\n    console.log('Sending OpenAI request: ', data.text, data.ingredients);\r\n\r\n    fetch(endpoint, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(data)\r\n    })\r\n      .then(response => {\r\n        console.log(response);\r\n        return response.json();\r\n      })\r\n      .then(data => {\r\n        setLoading(false);\r\n        console.log('Success:', data);\r\n        const recipeResponse = data.reply.choices[0].message.content;\r\n        const parsedResponse = JSON.parse(recipeResponse);\r\n        console.log(parsedResponse);\r\n        navigate('/recipe-builder', { state: { recipe: parsedResponse } });\r\n      })\r\n      .catch((error) => {\r\n        setLoading(false);\r\n        console.error('Error:', error);\r\n        // Handle error state here, e.g., display an error message\r\n      });\r\n  };\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    if (loading) {\r\n        const interval = setInterval(() => {\r\n            setCurrentMessage(prevMessage => {\r\n                const index = loadingMessages.indexOf(prevMessage);\r\n                const nextIndex = (index + 1) % loadingMessages.length;\r\n                return loadingMessages[nextIndex];\r\n            });\r\n        }, 4000); // Change message every 4 seconds\r\n\r\n        return () => clearInterval(interval);\r\n    }\r\n  }, [loading]);\r\n\r\n  const handleManualClick = () => {\r\n    navigate('/recipe-builder'); // Replace with your actual route\r\n  };\r\n\r\n  function formatIngredientsList(ingredients) {\r\n    let formattedString = \"\";\r\n\r\n    Object.keys(ingredients).forEach((key, index, array) => {\r\n      formattedString += key;\r\n\r\n      if (ingredients[key].hasOwnProperty('default_percent') || ingredients[key].hasOwnProperty('max_percent')) {\r\n        formattedString += \" (\";\r\n\r\n        if (ingredients[key].hasOwnProperty('default_percent')) {\r\n          formattedString += `default: ${ingredients[key].default_percent}`;\r\n          if (ingredients[key].hasOwnProperty('max_percent')) {\r\n            formattedString += \", \";\r\n          }\r\n        }\r\n\r\n        if (ingredients[key].hasOwnProperty('max_percent')) {\r\n          formattedString += `max: ${ingredients[key].max_percent}`;\r\n        }\r\n\r\n        formattedString += \")\";\r\n      }\r\n\r\n      if (index < array.length - 1) {\r\n        formattedString += \", \";\r\n      }\r\n    });\r\n\r\n    return formattedString;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>Your Selections</h2>\r\n      <h3>Skincare Goals/Concerns:</h3>\r\n      <ul>\r\n        {goalsData.map((item, index) => (\r\n          <li key={index}>{item}</li>\r\n        ))}\r\n      </ul>\r\n\r\n      <h3>Selected Skincare Product:</h3>\r\n      <ul><li>{productData.charAt(0).toUpperCase() + productData.slice(1)}</li></ul>\r\n\r\n      <h3>Include Fragrance: </h3>\r\n      <ul><li>{includeFragrance.charAt(0).toUpperCase() + includeFragrance.slice(1)}</li></ul>\r\n      {includeFragrance === 'yes' && (\r\n        <>\r\n          <h3>Selected Moods:</h3>\r\n          <ul>\r\n            {selectedMoods.map((item, index) => (\r\n              <li key={index}>{item}</li>\r\n            ))}\r\n          </ul>\r\n        </>\r\n      )}\r\n\r\n      {loading ? (\r\n        <div className=\"loading-container\">\r\n          <div className=\"loader\"></div> \r\n          <p className=\"loading-message\">{currentMessage}</p>\r\n        </div>\r\n      ) : (\r\n        <>\r\n          <button onClick={handleAIClick}>AI Recipe Generation</button>\r\n          <button onClick={handleManualClick}>Build Recipe Manually</button>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Summary;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport ingredients from './ingredients';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\n\r\nfunction RecipeBuilder() {\r\n    const navigate = useNavigate();\r\n    const [selectedIngredients, setSelectedIngredients] = useState([]);\r\n    const [ingredientProportions, setIngredientProportions] = useState({});\r\n    const [currentStep, setCurrentStep] = useState('selectIngredients');\r\n    const [recipeCommentary, setRecipeCommentary] = useState('');\r\n    const [shelfLifeEstimate, setShelfLifeEstimate] = useState('');\r\n    \r\n    const location = useLocation();\r\n    const initialRecipe = location.state?.recipe;\r\n    console.log(location.state);\r\n\r\n    console.log(\"initialRecipe\", initialRecipe);\r\n\r\n\r\n\r\n    // Function to move to the proportion adjustment step\r\n    const goToProportionAdjustment = () => {\r\n        setCurrentStep('adjustProportions');\r\n    };\r\n\r\n    // Function to go back to ingredient selection\r\n    const goBackToSelectIngredients = () => {\r\n        setCurrentStep('selectIngredients');\r\n    };\r\n\r\n    const handleIngredientSelect = (ingredientName) => {\r\n        if (selectedIngredients.includes(ingredientName)) {\r\n            setSelectedIngredients(selectedIngredients.filter(name => name !== ingredientName));\r\n            const newProportions = { ...ingredientProportions };\r\n            delete newProportions[ingredientName];\r\n            setIngredientProportions(newProportions);\r\n        } else {\r\n            setSelectedIngredients([...selectedIngredients, ingredientName]);\r\n            setIngredientProportions({ ...ingredientProportions, [ingredientName]: ingredients[ingredientName].phase === \"additive\" ? ingredients[ingredientName].default_percent : 10 });\r\n        }\r\n    };\r\n\r\n    const redistributeProportions = (adjustedIngredient, adjustedValue) => {\r\n        const totalAdditiveProportion = Object.keys(ingredientProportions)\r\n            .filter(name => isAdditive(name))\r\n            .reduce((acc, name) => acc + ingredientProportions[name], 0);\r\n\r\n        let remainingProportion = 100 - totalAdditiveProportion;\r\n        const nonAdditiveIngredients = selectedIngredients.filter(name => !isAdditive(name));\r\n\r\n        // First, set the adjusted ingredient's value and subtract it from the remaining proportion\r\n        const newProportions = { ...ingredientProportions, [adjustedIngredient]: adjustedValue };\r\n        remainingProportion -= adjustedValue;\r\n\r\n        // Then, distribute the remaining proportion among the other non-additive ingredients\r\n        const totalCurrentNonAdditive = nonAdditiveIngredients\r\n            .filter(name => name !== adjustedIngredient)\r\n            .reduce((acc, name) => acc + newProportions[name], 0);\r\n\r\n        // Prevent negative values during redistribution\r\n        if (totalCurrentNonAdditive > 0) {\r\n            const scaleFactor = remainingProportion / totalCurrentNonAdditive;\r\n            nonAdditiveIngredients.forEach(name => {\r\n                if (name !== adjustedIngredient) {\r\n                    let adjustedProportion = newProportions[name] * scaleFactor;\r\n                    newProportions[name] = adjustedProportion < 0 ? 0 : adjustedProportion;\r\n                }\r\n            });\r\n        } else {\r\n            // If there are no other non-additives, set their proportions to 0\r\n            nonAdditiveIngredients.forEach(name => {\r\n                if (name !== adjustedIngredient) {\r\n                    newProportions[name] = 0;\r\n                }\r\n            });\r\n        }\r\n\r\n        setIngredientProportions(newProportions);\r\n    };\r\n\r\n\r\n\r\n\r\n    const handleSliderChange = (ingredientName, value) => {\r\n        const newValue = parseFloat(value);\r\n        redistributeProportions(ingredientName, newValue);\r\n    };\r\n    const [temporaryInputs, setTemporaryInputs] = useState({});\r\n\r\n    const handleAdditiveChange = (ingredientName, value) => {\r\n        // Update the temporary input state\r\n        setTemporaryInputs({ ...temporaryInputs, [ingredientName]: value });\r\n        // If the value is a valid complete number, update the proportions immediately\r\n        const newValue = parseFloat(value);\r\n        const maxPercent = ingredients[ingredientName].max_percent || 100; // Default to 100 if not specified\r\n        if (!isNaN(newValue) && value.match(/^\\d+(\\.\\d+)?$/)) {\r\n            const boundedValue = newValue > maxPercent ? maxPercent : newValue;\r\n            const newProportions = { ...ingredientProportions, [ingredientName]: boundedValue };\r\n            setIngredientProportions(newProportions);\r\n            redistributeProportions(ingredientName, newValue);\r\n        }\r\n    };\r\n\r\n    const handleAdditiveBlur = (ingredientName) => {\r\n        const value = temporaryInputs[ingredientName];\r\n        const newValue = value ? parseFloat(value) : 0;\r\n        const maxPercent = ingredients[ingredientName].max_percent || 100; // Default to 100 if not specified\r\n        const boundedValue = newValue > maxPercent ? maxPercent : newValue;\r\n        if (!isNaN(boundedValue)) {\r\n            // Update the real proportions and redistribute\r\n            const newProportions = { ...ingredientProportions, [ingredientName]: boundedValue };\r\n            setIngredientProportions(newProportions);\r\n            redistributeProportions(ingredientName, boundedValue);\r\n            if (newValue > maxPercent) {\r\n                // Update the temporary input state\r\n                setTemporaryInputs({ ...temporaryInputs, [ingredientName]: maxPercent });\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n\r\n    const isIngredientSelected = (ingredientName) => {\r\n        return selectedIngredients.includes(ingredientName);\r\n    };\r\n\r\n    const isAdditive = (ingredientName) => {\r\n        const ingredient = ingredients[ingredientName];\r\n        return ingredient ? ingredient.phase === \"additive\" : false;\r\n    };\r\n\r\n    const roundProportions = () => {\r\n        const newProportions = { ...ingredientProportions };\r\n        let roundedTotal = 0;\r\n\r\n        // Round each non-additive proportion\r\n        Object.keys(newProportions).forEach(key => {\r\n            if (!isAdditive(key)) {\r\n                newProportions[key] = Math.round(newProportions[key]);\r\n            }\r\n            roundedTotal += newProportions[key];\r\n        });\r\n\r\n        // Calculate discrepancy and adjust non-additive proportions\r\n        const discrepancy = 100 - roundedTotal;\r\n        const nonAdditiveKeys = Object.keys(newProportions).filter(key => !isAdditive(key));\r\n        const adjustmentPerIngredient = discrepancy / nonAdditiveKeys.length;\r\n\r\n        nonAdditiveKeys.forEach(key => {\r\n            newProportions[key] += adjustmentPerIngredient;\r\n        });\r\n\r\n        // Handle negative proportions\r\n        let negativeSum = 0;\r\n        nonAdditiveKeys.forEach(key => {\r\n            if (newProportions[key] < 0) {\r\n                negativeSum += newProportions[key];\r\n                newProportions[key] = 0;\r\n            }\r\n        });\r\n\r\n        // Redistribute the negative sum among positive non-additive ingredients\r\n        if (negativeSum < 0) {\r\n            const positiveKeys = nonAdditiveKeys.filter(key => newProportions[key] >= 0.01);\r\n            const positiveAdjustment = Math.abs(negativeSum) / positiveKeys.length;\r\n\r\n            positiveKeys.forEach(key => {\r\n                newProportions[key] += positiveAdjustment;\r\n            });\r\n        }\r\n\r\n        // Final check if total exceeds 100%\r\n        const finalTotal = Object.values(newProportions).reduce((acc, val) => acc + val, 0);\r\n        if (finalTotal > 100) {\r\n            const excess = finalTotal - 100;\r\n            const positiveKeys = nonAdditiveKeys.filter(key => newProportions[key] > 0);\r\n            const excessAdjustment = excess / positiveKeys.length;\r\n\r\n            positiveKeys.forEach(key => {\r\n                newProportions[key] -= excessAdjustment;\r\n            });\r\n        }\r\n\r\n        setIngredientProportions(newProportions);\r\n    };\r\n\r\n    const getRecipeAdvice = () => {\r\n        console.log(\"boop\");\r\n    };\r\n\r\n    const handleMouseUp = () => {\r\n        setTimeout(() => {\r\n            roundProportions();\r\n        }, 10); // Delay of 100 milliseconds\r\n    };\r\n\r\n    const calculateTotalPercentage = () => {\r\n        return Object.values(ingredientProportions).reduce((acc, value) => acc + value, 0);\r\n    };\r\n\r\n    const finalizeRecipe = () => {\r\n        roundProportions();\r\n        navigate('/finalize-recipe', { state: { recipe: ingredientProportions, commentary: recipeCommentary } });\r\n    }\r\n\r\n\r\n    const tableStyle = {\r\n        width: '95%', // Ensure the table takes full width\r\n        borderCollapse: 'collapse',\r\n    };\r\n\r\n    const headerStyle = {\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        marginBottom: '10px',\r\n    };\r\n\r\n    const headerWithButtonStyle = {\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        marginBottom: '10px',\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        const newProportions = {};\r\n\r\n        // Set initial proportions for selected ingredients\r\n        selectedIngredients.forEach(ingredient => {\r\n            if (isAdditive(ingredient)) {\r\n                newProportions[ingredient] = 1; // Set initial value for additive\r\n            } else {\r\n                newProportions[ingredient] = 10; // Set initial value for non-additive\r\n            }\r\n        });\r\n\r\n        setIngredientProportions(prevProportions => {\r\n            // Retain the proportions of ingredients that are still selected\r\n            return Object.keys(prevProportions)\r\n                .filter(key => selectedIngredients.includes(key))\r\n                .reduce((acc, key) => {\r\n                    acc[key] = prevProportions[key];\r\n                    return acc;\r\n                }, newProportions);\r\n        });\r\n    }, [selectedIngredients]);\r\n\r\n    const totalPercentage = calculateTotalPercentage();\r\n    const totalPercentageStyle = {\r\n        color: Math.abs(totalPercentage - 100) < 0.01 ? 'black' : 'red',\r\n    };\r\n    \r\n    useEffect(() => {\r\n        console.log(\"useeffectinitialRecipe\", initialRecipe);\r\n        if (initialRecipe) {\r\n            const ingredientsFromResponse = {};\r\n            const selectedIngredientsFromResponse = [];\r\n    \r\n            Object.keys(initialRecipe).forEach(key => {\r\n                if (key === \"commentary\") {\r\n                    setRecipeCommentary(initialRecipe[\"commentary\"]);\r\n                }\r\n                else if (key === \"shelfLifeEstimate\") {\r\n                    setShelfLifeEstimate(initialRecipe[\"shelfLifeEstimate\"]);\r\n                }\r\n                else if ( ingredients[key]) {\r\n                    ingredientsFromResponse[key] = initialRecipe[key];\r\n                    selectedIngredientsFromResponse.push(key);\r\n                } \r\n            });\r\n            console.log(\"ingredientsfromresponse\", ingredientsFromResponse);\r\n            setIngredientProportions(ingredientsFromResponse);\r\n            setSelectedIngredients(selectedIngredientsFromResponse);\r\n\r\n            goToProportionAdjustment();\r\n        }\r\n    }, [initialRecipe]);\r\n\r\n    return (\r\n        <div>\r\n            {currentStep === 'selectIngredients' && (\r\n                <div>\r\n                    <div>\r\n                        <div style={headerWithButtonStyle}>\r\n                            <h3>Available Ingredients:</h3>\r\n                            <button onClick={goToProportionAdjustment}>Adjust Proportions</button>\r\n                            <span></span>\r\n                        </div>\r\n                        {Object.entries(ingredients).map(([name, details]) => (\r\n                            <div className={ (isIngredientSelected(name) ? 'selected' : '') + \" ingredient-row\"}\r\n                                key={name}\r\n                                onClick={() => handleIngredientSelect(name)}\r\n                            >\r\n                                <strong>{name}</strong>\r\n                                <small>{details.description}</small>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n            )}\r\n            {currentStep === 'adjustProportions' && (\r\n                <div className=\"recipe-builder-container\">\r\n\r\n                    <div style={headerStyle}>\r\n                        <button onClick={goBackToSelectIngredients}>Back to Ingredients</button>\r\n                        <h3>Proportions:</h3>\r\n                        <span style={totalPercentageStyle} onClick={roundProportions}>{totalPercentage.toFixed(2)}%</span>\r\n                    </div>\r\n                    <div className=\"scrollable-content\">\r\n                    <table style={tableStyle}>\r\n                        <tbody>\r\n                            {selectedIngredients.map(name => (\r\n                                <React.Fragment key={name}>\r\n                                    <tr>\r\n                                        <td>{name}</td>\r\n                                        <td>{ingredientProportions[name].toFixed(2)}%</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td colSpan=\"2\">\r\n                                            {isAdditive(name) ? (\r\n                                                <div style={{ position: 'relative' }}>\r\n                                                    <input\r\n                                                        type=\"text\"\r\n                                                        value={temporaryInputs[name] ?? ingredientProportions[name]}\r\n                                                        onChange={(e) => handleAdditiveChange(name, e.target.value)}\r\n                                                        onBlur={(e) => handleAdditiveBlur(name, e.target.value)}\r\n                                                        style={{ width: '100%', borderColor: ingredientProportions[name] === ingredients[name].max_percent ? 'red' : 'initial' }}\r\n                                                    />\r\n                                                    {ingredientProportions[name] === ingredients[name].max_percent && (\r\n                                                        <span style={{ position: 'absolute', right: 0, top: 0, color: 'red' }}>Max</span>\r\n                                                    )}\r\n                                                </div>\r\n                                            ) : (\r\n                                                <input\r\n                                                    type=\"range\"\r\n                                                    min=\"0\"\r\n                                                    max=\"100\"\r\n                                                    step=\"0.01\"\r\n                                                    value={ingredientProportions[name]}\r\n                                                    onChange={(e) => handleSliderChange(name, e.target.value)}\r\n                                                    onMouseUp={handleMouseUp}\r\n                                                    onTouchEnd={handleMouseUp}\r\n                                                    style={{ width: '100%' }}\r\n                                                />\r\n                                            )}\r\n                                        </td>\r\n                                    </tr>\r\n                                </React.Fragment>\r\n                            ))}\r\n\r\n                        </tbody>\r\n                    </table>\r\n                    {recipeCommentary && (\r\n                        <div className=\"commentary\">\r\n                            <div style={headerWithButtonStyle}>\r\n                                <h3>Commentary:</h3>\r\n                                <button onClick={getRecipeAdvice}>Get Recipe Advice (Coming Soon!)</button>\r\n                            </div>\r\n                            <p>{recipeCommentary}</p>\r\n                            <p>Estimated Shelf Life: {shelfLifeEstimate}</p>\r\n                        </div>\r\n                    )}\r\n                    </div>\r\n                    <button className='submit' onClick={finalizeRecipe}>Finalize Recipe</button>\r\n                </div>\r\n            )}\r\n\r\n\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RecipeBuilder;\r\n","import { initializeApp } from 'firebase/app';\r\nimport { getFirestore } from 'firebase/firestore';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyD-XWrjMOmhRPjjRz-MOA1ARZN_RVwTcbc\",\r\n    authDomain: \"skincare-recipe-tool.firebaseapp.com\",\r\n    projectId: \"skincare-recipe-tool\",\r\n    storageBucket: \"skincare-recipe-tool.appspot.com\",\r\n    messagingSenderId: \"1053752399193\",\r\n    appId: \"1:1053752399193:web:caf58158f655ca8e0f2848\"\r\n};\r\n\r\nconst app = initializeApp(firebaseConfig);\r\nconst db = getFirestore(app);\r\n\r\nexport { db };\r\n","import React, { useState } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { db } from './firebase-config'; \r\nimport { collection, addDoc } from 'firebase/firestore'\r\n\r\nfunction FinalizeRecipe() {\r\n    const [recipeName, setRecipeName] = useState('');\r\n    const location = useLocation();\r\n    const navigate = useNavigate();\r\n    const recipe = location.state?.recipe;\r\n    const commentary = location.state?.commentary;\r\n\r\n    // Handler to save the recipe\r\n    const handleConfirmAndSave = async () => {\r\n        try {\r\n            console.log(location.state);\r\n            const docRef = await addDoc(collection(db, \"formulations\"), {\r\n                name: recipeName,\r\n                ingredients: recipe,\r\n                commentary: commentary\r\n            });\r\n            console.log(\"Document written with ID: \", docRef.id);\r\n            navigate('/saved-recipe', { state: { recipeId: docRef.id } }); \r\n        } catch (e) {\r\n            console.error(\"Error adding document: \", e);\r\n            // Show an error message or handle the error as needed\r\n        }\r\n    };\r\n    const handleChangeIngredients = () => {\r\n        navigate('/change-ingredients'); // Navigate to the change ingredients page\r\n    };\r\n\r\n    const handleChangeProportions = () => {\r\n        navigate('/recipe-builder'); // Navigate to the change proportions page\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h2>Name Your Custom Skincare Recipe</h2>\r\n            <input\r\n                type=\"text\"\r\n                placeholder=\"Enter recipe name\"\r\n                value={recipeName}\r\n                onChange={(e) => setRecipeName(e.target.value)}\r\n            />\r\n            <h2>Your Recipe</h2>\r\n            <div className=\"recipe\">\r\n                {recipe && Object.keys(recipe).map((key, index) => (\r\n                    <div key={index}>\r\n                        <strong>{key}</strong>: {recipe[key]}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n\r\n            <div className=\"actions\">\r\n                <button onClick={handleChangeIngredients}>Change Ingredients</button>\r\n                <button onClick={handleChangeProportions}>Change Proportions</button>\r\n                <button className=\"submit\" onClick={handleConfirmAndSave}>Confirm and Save</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FinalizeRecipe;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { db } from './firebase-config'; // Adjust the path as necessary\r\nimport { doc, getDoc } from 'firebase/firestore';\r\n\r\nfunction SavedRecipe() {\r\n    const [recipeData, setRecipeData] = useState(null);\r\n    const location = useLocation();\r\n    const navigate = useNavigate();\r\n    const recipeId = location.state?.recipeId;\r\n    const [shareButtonText, setShareButtonText] = useState('Share this Recipe');\r\n\r\n    useEffect(() => {\r\n        const searchParams = new URLSearchParams(location.search);\r\n        const paramRecipeId = searchParams.get('recipeId');\r\n        if(paramRecipeId) {\r\n            const fetchData = async () => {\r\n                const docRef = doc(db, \"formulations\", paramRecipeId);\r\n                const docSnap = await getDoc(docRef);\r\n\r\n                if (docSnap.exists()) {\r\n                    setRecipeData(docSnap.data());\r\n                } else {\r\n                    console.log(\"No such document!\");\r\n                }\r\n            };\r\n\r\n            fetchData();\r\n        }\r\n            \r\n        else if (recipeId) {\r\n            const fetchData = async () => {\r\n                const docRef = doc(db, \"formulations\", recipeId);\r\n                const docSnap = await getDoc(docRef);\r\n\r\n                if (docSnap.exists()) {\r\n                    setRecipeData(docSnap.data());\r\n                } else {\r\n                    console.log(\"No such document!\");\r\n                }\r\n            };\r\n\r\n            fetchData();\r\n        }\r\n    }, [recipeId, location.search]);\r\n\r\n    const handleShareRecipe = () => {\r\n        const currentUrl = window.location.href;\r\n        const shareUrl = `${currentUrl}?recipeId=${recipeId}`;\r\n        navigator.clipboard.writeText(shareUrl).then( () => {\r\n            console.log('Recipe URL copied to clipboard!');\r\n            setShareButtonText('Copied!'); // Change button text to 'Copied!'\r\n\r\n            setTimeout(() => {\r\n                setShareButtonText('Share this Recipe');\r\n            }, 3000);\r\n        }).catch( () => {\r\n            console.log('Error copying to clipboard');\r\n        });\r\n    };\r\n\r\n    const handleOrderFormulation = () => {\r\n        navigate('/order-formulation', { state: { recipeId } });\r\n    };\r\n\r\n    if (!recipeData) return <div>Loading...</div>;\r\n\r\n    return (\r\n        <div>\r\n            <h2>{recipeData.name}</h2>\r\n            <div className=\"recipe\">\r\n                {Object.keys(recipeData.ingredients).map((key, index) => (\r\n                    <div key={index}>\r\n                        <strong>{key}</strong>: {recipeData.ingredients[key]}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            <button onClick={handleShareRecipe}>{shareButtonText}</button>\r\n            <button onClick={handleOrderFormulation}>Order Formulation of this Recipe</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SavedRecipe;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { db } from './firebase-config';\r\nimport { doc, getDoc, addDoc, collection } from 'firebase/firestore';\r\n\r\nfunction OrderFormulation() {\r\n    const navigate = useNavigate();\r\n    const [recipeData, setRecipeData] = useState(null);\r\n    const [name, setName] = useState('');\r\n    const [phoneNumber, setPhoneNumber] = useState('');\r\n    const [pickup, setPickup] = useState(true);\r\n    const [address, setAddress] = useState({ street1: '', street2: '', zip: '' });\r\n    const location = useLocation();\r\n    const recipeId = location.state?.recipeId;\r\n\r\n    useEffect(() => {\r\n        if (recipeId) {\r\n            const fetchData = async () => {\r\n                const docRef = doc(db, \"formulations\", recipeId);\r\n                const docSnap = await getDoc(docRef);\r\n\r\n                if (docSnap.exists()) {\r\n                    setRecipeData(docSnap.data());\r\n                } else {\r\n                    console.log(\"No such document!\");\r\n                }\r\n            };\r\n\r\n            fetchData();\r\n        }\r\n    }, [recipeId]);\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        try {\r\n            await addDoc(collection(db, \"orders\"), {\r\n                name,\r\n                recipeId,\r\n                phoneNumber,\r\n                pickup,\r\n                address: pickup ? null : address\r\n            });\r\n            console.log(\"Order submitted\");\r\n            navigate('/order-success');\r\n        } catch (e) {\r\n            console.error(\"Error submitting order: \", e);\r\n            // Show an error message or handle the error as needed\r\n        }\r\n    };\r\n\r\n    if (!recipeData) return <div>Loading...</div>;\r\n\r\n    return (\r\n        <div>\r\n            <h2>{recipeData.name}</h2>\r\n            <div className=\"recipe\">\r\n                {Object.keys(recipeData.ingredients).map((key, index) => (\r\n                    <div key={index}>\r\n                        <strong>{key}</strong>: {recipeData.ingredients[key]}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            <p>While this service is in development, formulations are free to you! We only ask that you please provide a review of your product and feedback about your experience using the service. (We'll send you a way to access that after we deliver your formulation).</p>\r\n            <p>We currently are only serving people in the Seattle area. <a href=\"#\">Click here</a> to be put on a waiting list for us to formulate and ship your recipe once we have that set up.</p>\r\n            <form onSubmit={handleSubmit}>\r\n                <div>\r\n                    <label>Your Name:</label>\r\n                    <input type=\"text\" value={name} onChange={(e) => setName(e.target.value)} />\r\n                </div>\r\n                <div>\r\n                    <label>Mobile phone number (We'll text with you to coordinate delivery):</label>\r\n                    <input type=\"tel\" value={phoneNumber} onChange={(e) => setPhoneNumber(e.target.value)} />\r\n                </div>\r\n                <div>\r\n                    <label>Are you willing to pick it up from Chris Koss's house?</label>\r\n                    <select value={pickup} onChange={(e) => setPickup(e.target.value === 'true')}>\r\n                        <option value=\"true\">Yes</option>\r\n                        <option value=\"false\">No</option>\r\n                    </select>\r\n                </div>\r\n                {!pickup && (\r\n                    <div>\r\n                        <label>Delivery Address:</label>\r\n                        <input type=\"text\" placeholder=\"Street 1\" value={address.street1} onChange={(e) => setAddress({ ...address, street1: e.target.value })} />\r\n                        <input type=\"text\" placeholder=\"Street 2\" value={address.street2} onChange={(e) => setAddress({ ...address, street2: e.target.value })} />\r\n                        <input type=\"text\" value=\"Seattle\" readOnly />\r\n                        <input type=\"text\" value=\"WA\" readOnly />\r\n                        <input type=\"text\" placeholder=\"Zip Code\" value={address.zip} onChange={(e) => setAddress({ ...address, zip: e.target.value })} />\r\n                    </div>\r\n                )}\r\n                <button type=\"submit\" className=\"submit\">Submit Order</button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default OrderFormulation;\r\n","import React from 'react';\r\n\r\nfunction OrderSuccess() {\r\n    return (\r\n        <div className=\"order-success\">\r\n            <h2>Order Submitted Successfully!</h2>\r\n            <p>Your information has been successfully submitted. Please look out for a text message from Chris.</p>\r\n            <p>Chris will coordinate the mixing time with you, ensuring that your formulation is mixed within 24 hours of when you receive it for maximum freshness.</p>\r\n            <p>Thank you for using our service!</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default OrderSuccess;\r\n","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport { HashRouter as Router, Routes, Route, Link } from 'react-router-dom';\r\nimport Goals from './Goals';\r\nimport Product from './Product';\r\nimport Summary from './Summary'; \r\nimport RecipeBuilder from './RecipeBuilder';\r\nimport FinalizeRecipe from './FinalizeRecipe';\r\nimport SavedRecipe from './SavedRecipe';\r\nimport OrderFormulation from './OrderFormulation';\r\nimport OrderSuccess from './OrderSuccess';\r\n\r\n\r\nfunction App() {\r\n  const [goalsData, setGoalsData] = useState([]);\r\n  const [includeFragrance, setIncludeFragrance] = useState('no');\r\n  const [selectedMoods, setSelectedMoods] = useState([]);\r\n  const [productData, setProductData] = useState('');\r\n\r\n  const setIncludeFragranceApp = (fragrance) => {\r\n    setIncludeFragrance(fragrance);\r\n  };\r\n\r\n  const setSelectedMoodsApp = (moods) => {\r\n    setSelectedMoods(moods);\r\n  };\r\n\r\n    // Style for background image\r\n    const homePageStyle = {\r\n      backgroundImage: 'url(\"bgimg.png\")',\r\n      backgroundSize: 'contain',\r\n      backgroundRepeat: 'no-repeat',\r\n      backgroundPosition: 'center top',\r\n      height: '100vh',\r\n      color: '#61685f',\r\n    };\r\n\r\n  return (\r\n    <Router>\r\n      <Routes>\r\n        <Route path=\"/\" element={\r\n          <div style={homePageStyle} className=\"homePageContainer\">\r\n            <h1>Welcome to the Skincare <br /> Formulation App!</h1>\r\n            <Link to=\"/goals\"><button className=\"startbutton\">Design Custom <br /> Skincare Recipe</button></Link>\r\n            <p>Plant based, Cruelty Free, Custom made to order</p>\r\n            <p>Our AI-powered assistant will help you create </p>\r\n            <p>the perfect formulation for your skin's needs</p>\r\n          </div>\r\n        } />\r\n        <Route path=\"/goals\" element={\r\n          <Goals setGoalsData={setGoalsData} \r\n                 setIncludeFragranceApp={setIncludeFragranceApp}\r\n                 setSelectedMoodsApp={setSelectedMoodsApp}/>\r\n        } />\r\n        <Route path=\"/product\" element={<Product setProductData={setProductData} />} />\r\n        <Route path=\"/summary\" element={<Summary goalsData={goalsData} \r\n                                                 productData={productData} \r\n                                                 includeFragrance={includeFragrance} \r\n                                                 selectedMoods={selectedMoods} />} />\r\n        <Route path=\"/recipe-builder\" element={<RecipeBuilder />} />\r\n        <Route path=\"/finalize-recipe\" element={<FinalizeRecipe />} />\r\n        <Route path=\"/saved-recipe\" element={<SavedRecipe />} />\r\n        <Route path=\"/order-formulation\" element={<OrderFormulation />} />\r\n        <Route path=\"/order-success\" element={<OrderSuccess />} />\r\n      </Routes>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
{"version":3,"sources":["Form1.js","Form2.js","Summary.js","App.js","reportWebVitals.js","index.js"],"names":["Form1","_ref","setForm1Data","navigate","useNavigate","selectedOptions","setSelectedOptions","useState","isOptionSelected","option","includes","React","createElement","onSubmit","e","preventDefault","map","goal","index","key","type","onClick","newSelectedOptions","filter","item","toggleOption","className","concat","disabled","length","Form2","setForm2Data","selectedProduct","setSelectedProduct","Object","entries","cleanser","toner","serum","moisturizer","sunscreen","faceOil","lotion","cream","butter","balm","_ref2","description","product","handleSelection","charAt","toUpperCase","slice","Summary","form1Data","form2Data","App","Router","Routes","Route","path","element","style","textAlign","marginTop","Link","to","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"oRAqDeA,MAjDf,SAAcC,GAAmB,IAAlBC,aAAEA,GAAcD,EAC7B,MAAME,EAAWC,eACVC,EAAiBC,GAAsBC,mBAAS,IAgBjDC,EAAoBC,GACjBJ,EAAgBK,SAASD,GAUlC,OACEE,IAAAC,cAAA,WACED,IAAAC,cAAA,UAAI,uCACJD,IAAAC,cAAA,QAAMC,SAVYC,IACpBA,EAAEC,iBACFb,EAAaG,GAEbF,EAAS,YAtBW,CACpB,aAAc,qBAAsB,WAAY,cAChD,YAAa,UAAW,iBAAkB,WAC1C,qBA0BmBa,IAAI,CAACC,EAAMC,IACtBP,IAAAC,cAAA,UACIO,IAAKD,EACLE,KAAK,SACLC,QAASA,IA3BDZ,KACpB,MAAMa,EAAqBjB,EAAgBK,SAASD,GAChDJ,EAAgBkB,OAAOC,GAAQA,IAASf,GACxC,IAAIJ,EAAiBI,GAEzBH,EAAmBgB,IAsBQG,CAAaR,GAC5BS,UAAS,gBAAAC,OAAkBnB,EAAiBS,GAAQ,WAAa,KAEhEA,IAGTN,IAAAC,cAAA,UAAQQ,KAAK,SAASQ,SAAqC,IAA3BvB,EAAgBwB,QAAc,iBCSvDC,MApDf,SAAc7B,GAAmB,IAAlB8B,aAAEA,GAAc9B,EAC3B,MAAME,EAAWC,eACV4B,EAAiBC,GAAsB1B,mBAAS,IA6BvD,OACII,IAAAC,cAAA,OAAKc,UAAU,mBACXf,IAAAC,cAAA,UAAI,6BACJD,IAAAC,cAAA,QAAMC,SAVQC,IAClBA,EAAEC,iBACFgB,EAAaC,GAEb7B,EAAS,cAOA+B,OAAOC,QA/BK,CACrBC,SAAU,8GACVC,MAAO,2GACPC,MAAO,8HACPC,YAAa,wGACbC,UAAW,4GAEXC,QAAS,8FAGTC,OAAQ,8GACRC,MAAO,oGACPC,OAAQ,gHACRC,KAAM,4GAkBoC7B,IAAI8B,IAAA,IAAE3B,EAAK4B,GAAYD,EAAA,OACrDnC,IAAAC,cAAA,OAAKO,IAAKA,GACNR,IAAAC,cAAA,UAAQQ,KAAK,SAASC,QAASA,IAjB1B2B,KACrBf,EAAmBe,IAgBkCC,CAAgB9B,GACjDO,UAAWM,IAAoBb,EAAM,WAAa,IACjDA,EAAI+B,OAAO,GAAGC,cAAgBhC,EAAIiC,MAAM,IAE7CzC,IAAAC,cAAA,KAAGc,UAAWM,IAAoBb,EAAM,WAAa,IAChD4B,MAIbpC,IAAAC,cAAA,UAAQQ,KAAK,SAASQ,UAAWI,GAAiB,WC/BnDqB,MAjBf,SAAgBpD,GAA2B,IAA1BqD,UAAEA,EAASC,UAAEA,GAAWtD,EACvC,OACEU,IAAAC,cAAA,WACED,IAAAC,cAAA,UAAI,mBACJD,IAAAC,cAAA,UAAI,4BACJD,IAAAC,cAAA,UACG0C,EAAUtC,IAAI,CAACQ,EAAMN,IACpBP,IAAAC,cAAA,MAAIO,IAAKD,GAAQM,KAIrBb,IAAAC,cAAA,UAAI,8BACJD,IAAAC,cAAA,SAAI2C,WCcKC,MArBf,WACE,MAAOF,EAAWpD,GAAgBK,mBAAS,KACpCgD,EAAWxB,GAAgBxB,mBAAS,IAE3C,OACEI,IAAAC,cAAC6C,IAAM,KACL9C,IAAAC,cAAC8C,IAAM,KACL/C,IAAAC,cAAC+C,IAAK,CAACC,KAAK,IAAIC,QACdlD,IAAAC,cAAA,OAAKkD,MAAO,CAAEC,UAAW,SAAUC,UAAW,QAC5CrD,IAAAC,cAAA,UAAI,2CACJD,IAAAC,cAACqD,IAAI,CAACC,GAAG,UAASvD,IAAAC,cAAA,cAAQ,kBAG9BD,IAAAC,cAAC+C,IAAK,CAACC,KAAK,SAASC,QAASlD,IAAAC,cAACZ,EAAK,CAACE,aAAcA,MACnDS,IAAAC,cAAC+C,IAAK,CAACC,KAAK,SAASC,QAASlD,IAAAC,cAACkB,EAAK,CAACC,aAAcA,MACnDpB,IAAAC,cAAC+C,IAAK,CAACC,KAAK,WAAWC,QAASlD,IAAAC,cAACyC,EAAO,CAACC,UAAWA,EAAWC,UAAWA,SCVnEY,MAZSC,IAClBA,GAAeA,aAAuBC,UACxCC,EAAAxD,EAAA,GAAAyD,KAAAD,EAAAE,KAAA,UAAqBD,KAAKtE,IAAiD,IAAhDwE,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,QAAEA,GAAS5E,EACpEwE,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAQT,MCDDU,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHvE,IAAAC,cAACD,IAAMwE,WAAU,KACfxE,IAAAC,cAAC4C,EAAG,QAORW","file":"static/js/main.a97b7f59.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport './Form1.css';\r\n\r\nfunction Form1({ setForm1Data }) {\r\n  const navigate = useNavigate();\r\n  const [selectedOptions, setSelectedOptions] = useState([]);\r\n\r\n  const skincareGoals = [\r\n    \"Adult acne\", \"Aging or age spots\", \"Wrinkles\", \"Large pores\", \r\n    \"Puffiness\", \"Redness\", \"Sun Protection\", \"Dry skin\", \r\n    \"Atopic dermatitis\"\r\n  ];\r\n\r\n  const toggleOption = (option) => {\r\n    const newSelectedOptions = selectedOptions.includes(option)\r\n      ? selectedOptions.filter(item => item !== option)\r\n      : [...selectedOptions, option];\r\n\r\n    setSelectedOptions(newSelectedOptions);\r\n  };\r\n\r\n  const isOptionSelected = (option) => {\r\n    return selectedOptions.includes(option);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    setForm1Data(selectedOptions); \r\n    // Navigate to the next form\r\n    navigate('/form2'); // Replace '/form2' with the path of your next form\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Select Your Skincare Goals/Concerns</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        {skincareGoals.map((goal, index) => (\r\n            <button\r\n                key={index}\r\n                type=\"button\"\r\n                onClick={() => toggleOption(goal)}\r\n                className={`form1-button ${isOptionSelected(goal) ? 'selected' : ''}`}\r\n            >\r\n                {goal}\r\n            </button>\r\n        ))}\r\n        <button type=\"submit\" disabled={selectedOptions.length === 0}>Next</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Form1;\r\n","import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport './Form2.css';\r\n\r\nfunction Form2({ setForm2Data }) {\r\n    const navigate = useNavigate();\r\n    const [selectedProduct, setSelectedProduct] = useState('');\r\n\r\n    const skincareProducts = {\r\n        cleanser: \"Used to remove dirt, oil, and makeup from the skin. It helps in keeping the pores clear and the skin clean.\",\r\n        toner: \"Applied after cleansing, toner helps to remove any remaining impurities and balances the pH of the skin.\",\r\n        serum: \"Highly concentrated with active ingredients, serums target specific skin concerns such as aging, hydration, or brightening.\",\r\n        moisturizer: \"Hydrates the skin and locks in moisture. It can come in various forms like lotions, creams, and gels.\",\r\n        sunscreen: \"Protects the skin from harmful UV rays. It's essential for preventing sun damage, aging, and skin cancer.\",\r\n        // exfoliant: \"Removes dead skin cells from the surface of the skin, promoting a smoother and clearer complexion.\",\r\n        faceOil: \"Provides intensive hydration and nourishment, especially beneficial for dry or mature skin.\",\r\n        //eyeCream: \"Specifically formulated for the delicate eye area, it targets concerns like dark circles, puffiness, and wrinkles.\",\r\n        //mask: \"Used occasionally to address specific skin concerns. Masks can hydrate, detoxify, or provide anti-aging benefits.\",\r\n        lotion: \"A lightweight moisturizer, often used for normal to oily skin, providing hydration without being too heavy.\",\r\n        cream: \"Thicker than lotion, creams are ideal for dry skin as they provide more intensive moisturization.\",\r\n        butter: \"Even thicker than creams, butters are used for very dry skin areas, providing deep nourishment and hydration.\",\r\n        balm: \"A dense, oil-based product, balms are used for intense healing and protection, often in specific areas.\"\r\n    };\r\n\r\n    const handleSelection = (product) => {\r\n        setSelectedProduct(product);\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        setForm2Data(selectedProduct); \r\n        // Navigate to the next form or a summary page\r\n        navigate('/summary'); // Replace '/summary' with the path of your next step\r\n    };\r\n\r\n    return (\r\n        <div className=\"form2-container\">\r\n            <h2>Select a Skincare Product</h2>\r\n            <form onSubmit={handleSubmit}>\r\n                {Object.entries(skincareProducts).map(([key, description]) => (\r\n                    <div key={key}>\r\n                        <button type=\"button\" onClick={() => handleSelection(key)}\r\n                            className={selectedProduct === key ? 'selected' : ''}>\r\n                            {key.charAt(0).toUpperCase() + key.slice(1)}\r\n                        </button>\r\n                        <p className={selectedProduct === key ? 'selected' : ''}>\r\n                            {description}\r\n                        </p>\r\n                    </div>\r\n                ))}\r\n                <button type=\"submit\" disabled={!selectedProduct}>Next</button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Form2;\r\n","import React from 'react';\r\n\r\nfunction Summary({ form1Data, form2Data }) {\r\n  return (\r\n    <div>\r\n      <h2>Your Selections</h2>\r\n      <h3>Skincare Goals/Concerns:</h3>\r\n      <ul>\r\n        {form1Data.map((item, index) => (\r\n          <li key={index}>{item}</li>\r\n        ))}\r\n      </ul>\r\n\r\n      <h3>Selected Skincare Product:</h3>\r\n      <p>{form2Data}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Summary;\r\n","import React, { useState } from 'react';\nimport { BrowserRouter as Router, Routes, Route, Link } from 'react-router-dom';\nimport Form1 from './Form1';\nimport Form2 from './Form2';\nimport Summary from './Summary'; // Make sure to create this component\nimport './App.css';\n\nfunction App() {\n  const [form1Data, setForm1Data] = useState([]);\n  const [form2Data, setForm2Data] = useState('');\n\n  return (\n    <Router>\n      <Routes>\n        <Route path=\"/\" element={\n          <div style={{ textAlign: 'center', marginTop: '20%' }}>\n            <h1>Welcome to the Skincare Formulation App</h1>\n            <Link to=\"/form1\"><button>Start Form</button></Link>\n          </div>\n        } />\n        <Route path=\"/form1\" element={<Form1 setForm1Data={setForm1Data} />} />\n        <Route path=\"/form2\" element={<Form2 setForm2Data={setForm2Data} />} />\n        <Route path=\"/summary\" element={<Summary form1Data={form1Data} form2Data={form2Data} />} />\n      </Routes>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}